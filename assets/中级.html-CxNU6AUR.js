import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,o as s,b as a,a as n}from"./app-I6Ars0sj.js";const e={},u=a(`<h2 id="eventlopp" tabindex="-1"><a class="header-anchor" href="#eventlopp"><span>Eventlopp</span></a></h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>Event loop 不是 ECMAScript 标准，而是 HTML 标准，各浏览器会有不同程度的执行。</p></div><p>Javascript 有一个 <strong>main thread 主线程</strong> 和 <strong>call-stack 调用栈(执行栈)</strong> ，所有的任务都会被放到调用栈等待主线程执行。</p><p>在 JavaScript 中，任务被分为两种，一种 <strong>宏任务（MacroTask）</strong> ，一种叫 <strong>微任务（MicroTask）</strong> ，均是队列结构。</p><ul><li><p>MacroTask（宏任务）</p><ul><li>script 全部代码、setTimeout、setInterval、setImmediate（浏览器暂时不支持，只有 IE10 支持，具体可见 MDN）、I/O、UI Rendering。</li></ul></li><li><p>MicroTask（微任务）</p><ul><li><p>Promise、Process.nextTick（Node 独有）、MutationObserver、Object.observe(废弃)</p></li><li><p>微任务的优先级比宏任务高</p></li></ul></li></ul><p>执行过程如下图： <img src="https://cdn.jsdelivr.net/gh/BZT2017/oss-img/eventloop.gif" alt="eventlopp" loading="lazy"></p><h2 id="为什么-promise-可以链式调用" tabindex="-1"><a class="header-anchor" href="#为什么-promise-可以链式调用"><span>为什么 promise 可以链式调用</span></a></h2><p>Promise 返回的时间与状态是不确定的，返回时有三种状态 <strong>pending（等待），resolved（成功），rejected（失败）</strong></p><p>Promise 可以链式.then 是因为，.then 回调返回的也是一个 Promise，所以才可以一直.then 链式调用</p><h2 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链"><span>原型链</span></a></h2><p>原型（prototype）：每个函数都有 prototype 属性，该属性指向原型对象；使用原型对象的好处是所有对象实例共享它所包含的属性和方法。</p><p>原型链主要解决了继承的问题，<strong>每个对象都拥有一个原型对象，通过__proto__指针指向其原型对象，并从中继承方法和属性</strong>，同时原型对象也可能拥有原型，这样一层一层，最终指向 null。</p><h2 id="js-的运算符优先级" tabindex="-1"><a class="header-anchor" href="#js-的运算符优先级"><span>JS 的运算符优先级</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>.成员访问(18) = new 有参数列表(18) -&gt; new 无参数列表(17)</p><p>同优先级按<mark>从左到右</mark>执行顺序</p><p>例如：</p><p>new new foo().getName()</p><p>解析成</p><p>new ((new foo()).getName())</p></div><p>练习题</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">getName</span><span class="token operator">:</span> getName<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Foo<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 注意声明式函数提升</span>
<span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//请写出以下输出结果：</span>
<span class="token comment">// Foo.getName();</span>
<span class="token comment">// getName();</span>
<span class="token comment">// Foo().getName();</span>
<span class="token comment">// getName();</span>
<span class="token comment">// new Foo.getName();</span>
<span class="token comment">// new Foo().getName();</span>
<span class="token comment">// new Foo().getName().getName();</span>
<span class="token comment">// new new Foo().getName();</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),p=n("table",{role:"table"},[n("thead",null,[n("tr",null,[n("th",null,"优先级"),n("th",null,"运算类型"),n("th",null,"关联性"),n("th",null,"运算符")])]),n("tbody",null,[n("tr",null,[n("td",null,"19"),n("td",null,"圆括号"),n("td",null,"n/a"),n("td",null,"( … )")]),n("tr",null,[n("td",null,"18"),n("td",null,"成员访问"),n("td",null,"从左到右"),n("td",null,"… . …")]),n("tr",null,[n("td"),n("td",null,"需计算的成员访问"),n("td",null,"从左到右"),n("td",null,"… [ … ]")]),n("tr",null,[n("td"),n("td",null,"new (带参数列表)"),n("td",null,"n/a new"),n("td",null,"… ( … )")]),n("tr",null,[n("td",null,"17"),n("td",null,"函数调用"),n("td",null,"从左到右"),n("td",null,"… ( … )")]),n("tr",null,[n("td"),n("td",null,"new (无参数列表)"),n("td",null,"从右到左"),n("td",null,"new …")]),n("tr",null,[n("td",null,"16"),n("td",null,"后置递增(运算符在后)"),n("td",null,"n/a"),n("td",null,"… ++")]),n("tr",null,[n("td"),n("td",null,"后置递减(运算符在后)"),n("td",null,"n/a"),n("td",null,"… --")]),n("tr",null,[n("td",null,"15"),n("td",null,"逻辑非"),n("td",null,"从右到左"),n("td",null,"! …")]),n("tr",null,[n("td"),n("td",null,"按位非"),n("td",null,"从右到左"),n("td",null,"~ …")]),n("tr",null,[n("td"),n("td",null,"一元加法"),n("td",null,"从右到左"),n("td",null,"+ …")]),n("tr",null,[n("td"),n("td",null,"一元减法"),n("td",null,"从右到左"),n("td",null,"- …")]),n("tr",null,[n("td"),n("td",null,"前置递增"),n("td",null,"从右到左"),n("td",null,"++ …")]),n("tr",null,[n("td"),n("td",null,"前置递减"),n("td",null,"从右到左"),n("td",null,"-- …")]),n("tr",null,[n("td"),n("td",null,"typeof"),n("td",null,"从右到左"),n("td",null,"typeof …")]),n("tr",null,[n("td"),n("td",null,"void"),n("td",null,"从右到左"),n("td",null,"void …")]),n("tr",null,[n("td"),n("td",null,"delete"),n("td",null,"从右到左"),n("td",null,"delete …")]),n("tr",null,[n("td",null,"14"),n("td",null,"乘法"),n("td",null,"从左到右"),n("td",null,"… * …")]),n("tr",null,[n("td"),n("td",null,"除法"),n("td",null,"从左到右"),n("td",null,"… / …")]),n("tr",null,[n("td"),n("td",null,"取模"),n("td",null,"从左到右"),n("td",null,"… % …")]),n("tr",null,[n("td",null,"13"),n("td",null,"加法"),n("td",null,"从左到右"),n("td",null,"… + …")]),n("tr",null,[n("td"),n("td",null,"减法"),n("td",null,"从左到右"),n("td",null,"… - …")]),n("tr",null,[n("td",null,"12"),n("td",null,"按位左移"),n("td",null,"从左到右"),n("td",null,"… << …")]),n("tr",null,[n("td"),n("td",null,"按位右移"),n("td",null,"从左到右"),n("td",null,"… >> …")]),n("tr",null,[n("td"),n("td",null,"无符号右移"),n("td",null,"从左到右"),n("td",null,"… >>> …")]),n("tr",null,[n("td",null,"11"),n("td",null,"小于"),n("td",null,"从左到右"),n("td",null,"… < …")]),n("tr",null,[n("td"),n("td",null,"小于等于"),n("td",null,"从左到右"),n("td",null,"… <= …")]),n("tr",null,[n("td"),n("td",null,"大于"),n("td",null,"从左到右"),n("td",null,"… > …")]),n("tr",null,[n("td"),n("td",null,"大于等于"),n("td",null,"从左到右"),n("td",null,"… >= …")]),n("tr",null,[n("td"),n("td",null,"in"),n("td",null,"从左到右"),n("td",null,"… in …")]),n("tr",null,[n("td"),n("td",null,"instanceof"),n("td",null,"从左到右"),n("td",null,"… instanceof …")]),n("tr",null,[n("td",null,"10"),n("td",null,"等号"),n("td",null,"从左到右"),n("td",null,"… == …")]),n("tr",null,[n("td"),n("td",null,"非等号"),n("td",null,"从左到右"),n("td",null,"… != …")]),n("tr",null,[n("td"),n("td",null,"全等号"),n("td",null,"从左到右"),n("td",null,"… === …")]),n("tr",null,[n("td"),n("td",null,"非全等号"),n("td",null,"从左到右"),n("td",null,"… !== …")]),n("tr",null,[n("td",null,"9"),n("td",null,"按位与"),n("td",null,"从左到右"),n("td",null,"… & …")]),n("tr",null,[n("td",null,"8"),n("td",null,"按位异或"),n("td",null,"从左到右"),n("td",null,"… ^ …")]),n("tr",null,[n("td",null,"7"),n("td",null,"按位或"),n("td",null,"从左到右"),n("td",null,"… 按位或 …")]),n("tr",null,[n("td",null,"6"),n("td",null,"逻辑与"),n("td",null,"从左到右"),n("td",null,"… && …")]),n("tr",null,[n("td",null,"5"),n("td",null,"逻辑或"),n("td",null,"从左到右"),n("td",null,"… 逻辑或 …")]),n("tr",null,[n("td",null,"4"),n("td",null,"条件运算符"),n("td",null,"从右到左"),n("td",null,"… ? … : …")]),n("tr",null,[n("td",null,"3"),n("td",null,"赋值"),n("td",null,"从右到左"),n("td",null,"… = …")]),n("tr",null,[n("td"),n("td"),n("td"),n("td",null,"… += …")]),n("tr",null,[n("td"),n("td"),n("td"),n("td",null,"… -= …")]),n("tr",null,[n("td"),n("td"),n("td"),n("td",null,"… *= …")]),n("tr",null,[n("td"),n("td"),n("td"),n("td",null,"… /= …")]),n("tr",null,[n("td"),n("td"),n("td"),n("td",null,"… %= …")]),n("tr",null,[n("td"),n("td"),n("td"),n("td",null,"… <<= …")]),n("tr",null,[n("td"),n("td"),n("td"),n("td",null,"… >>= …")]),n("tr",null,[n("td"),n("td"),n("td"),n("td",null,"… >>>= …")]),n("tr",null,[n("td"),n("td"),n("td"),n("td",null,"… &= …")]),n("tr",null,[n("td"),n("td"),n("td"),n("td",null,"… ^= …")]),n("tr",null,[n("td"),n("td"),n("td"),n("td",null,"… 或= …")]),n("tr",null,[n("td",null,"2"),n("td",null,"yield"),n("td",null,"从右到左"),n("td",null,"yield …")]),n("tr",null,[n("td"),n("td",null,"yield*"),n("td",null,"从右到左"),n("td",null,"yield* …")]),n("tr",null,[n("td",null,"1"),n("td",null,"展开运算符"),n("td",null,"n/a"),n("td",null,"... …")]),n("tr",null,[n("td",null,"0"),n("td",null,"逗号"),n("td",null,"从左到右"),n("td",null,"… , …")])])],-1),o=[u,p];function d(i,c){return s(),l("div",null,o)}const k=t(e,[["render",d],["__file","中级.html.vue"]]),v=JSON.parse('{"path":"/docs/interview/base/%E4%B8%AD%E7%BA%A7.html","title":"中级","lang":"zh-CN","frontmatter":{"title":"中级","date":"2022-06-20T00:00:00.000Z","description":"Eventlopp 注意 Event loop 不是 ECMAScript 标准，而是 HTML 标准，各浏览器会有不同程度的执行。 Javascript 有一个 main thread 主线程 和 call-stack 调用栈(执行栈) ，所有的任务都会被放到调用栈等待主线程执行。 在 JavaScript 中，任务被分为两种，一种 宏任务（Macr...","head":[["meta",{"property":"og:url","content":"https://bzt2017.github.io/docs/interview/base/%E4%B8%AD%E7%BA%A7.html"}],["meta",{"property":"og:site_name","content":"Tiger"}],["meta",{"property":"og:title","content":"中级"}],["meta",{"property":"og:description","content":"Eventlopp 注意 Event loop 不是 ECMAScript 标准，而是 HTML 标准，各浏览器会有不同程度的执行。 Javascript 有一个 main thread 主线程 和 call-stack 调用栈(执行栈) ，所有的任务都会被放到调用栈等待主线程执行。 在 JavaScript 中，任务被分为两种，一种 宏任务（Macr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/BZT2017/oss-img/eventloop.gif"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-08T10:59:50.000Z"}],["meta",{"property":"article:author","content":"Tiger"}],["meta",{"property":"article:published_time","content":"2022-06-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-08T10:59:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"中级\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/BZT2017/oss-img/eventloop.gif\\"],\\"datePublished\\":\\"2022-06-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-08T10:59:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tiger\\",\\"url\\":\\"https://bzt2017.github.io/myBlog/\\"}]}"]]},"headers":[{"level":2,"title":"Eventlopp","slug":"eventlopp","link":"#eventlopp","children":[]},{"level":2,"title":"为什么 promise 可以链式调用","slug":"为什么-promise-可以链式调用","link":"#为什么-promise-可以链式调用","children":[]},{"level":2,"title":"原型链","slug":"原型链","link":"#原型链","children":[]},{"level":2,"title":"JS 的运算符优先级","slug":"js-的运算符优先级","link":"#js-的运算符优先级","children":[]}],"git":{"createdTime":1715939602000,"updatedTime":1720436390000,"contributors":[{"name":"tiger-github","email":"634513456@qq.com","commits":2},{"name":"Tiger","email":"oncwnuO8Y28Ru5uEp_1PhIsFU2Rg@git.weixin.qq.com","commits":1}]},"readingTime":{"minutes":4.98,"words":1494},"filePathRelative":"docs/interview/base/中级.md","localizedDate":"2022年6月20日","excerpt":"<h2>Eventlopp</h2>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>Event loop 不是 ECMAScript 标准，而是 HTML 标准，各浏览器会有不同程度的执行。</p>\\n</div>\\n<p>Javascript 有一个 <strong>main thread 主线程</strong> 和 <strong>call-stack 调用栈(执行栈)</strong> ，所有的任务都会被放到调用栈等待主线程执行。</p>\\n<p>在 JavaScript 中，任务被分为两种，一种 <strong>宏任务（MacroTask）</strong> ，一种叫 <strong>微任务（MicroTask）</strong> ，均是队列结构。</p>","autoDesc":true}');export{k as comp,v as data};
