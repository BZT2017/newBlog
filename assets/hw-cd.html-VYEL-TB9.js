import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as d,c as r,f as h,e,d as t,a as l,w as i,b as n,o}from"./app-C6gSQRA4.js";const c={},u=l("p",null,[t("(出现频率:"),l("span",{style:{background:"red"}},"红色(5 次)"),t(" > "),l("span",{style:{background:"cyan"}},"蓝色(4 次)"),t(" > "),l("span",{style:{background:"lime"}},"绿色(3 次)"),t(" > "),l("span",{style:{background:"yellow"}},"黄色(2 次)"),t(" )")],-1),b=n('<h3 id="停车场车辆统计" tabindex="-1"><a class="header-anchor" href="#停车场车辆统计"><span><span style="background:red;">停车场车辆统计</span></span></a></h3><h4 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h4><p>特定大小的停车场，数组cars[]表示，其中1表示有车，0表示没车。</p><p>车辆大小不一，小车占一个车位（长度1），货车占两个车位（长度2），卡车占三个车位（长度3）。</p><p>统计停车场最少可以停多少辆车，返回具体的数目。</p><h4 id="输入描述" tabindex="-1"><a class="header-anchor" href="#输入描述"><span>输入描述</span></a></h4><p>整型字符串数组cars[]，其中1表示有车，0表示没车，数组长度小于1000。</p><h4 id="输出描述" tabindex="-1"><a class="header-anchor" href="#输出描述"><span>输出描述</span></a></h4><p>整型数字字符串，表示最少停车数目。</p><h4 id="用例" tabindex="-1"><a class="header-anchor" href="#用例"><span>用例</span></a></h4>',10),g=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",null,"输入"),l("td",null,"1,0,1")]),l("tr",null,[l("td",null,"输出"),l("td",null,"2")]),l("tr",null,[l("td",null,"说明"),l("td",null,[l("p",null,"1个小车占第1个车位"),t(),l("p",null,"第二个车位空"),t(),l("p",null,"1个小车占第3个车位"),t(),l("p",null,"最少有两辆车")])])])],-1),y=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"117px"}},"输入"),l("td",{style:{width:"381px"}},"1,1,0,0,1,1,1,0,1")]),l("tr",null,[l("td",{style:{width:"117px"}},"输出"),l("td",{style:{width:"381px"}},"3")]),l("tr",null,[l("td",{style:{width:"117px"}},"说明"),l("td",{style:{width:"381px"}},[l("p",null,"1个货车占第1、2个车位"),t(),l("p",null,"第3、4个车位空"),t(),l("p",null,"1个卡车占第5、6、7个车位"),t(),l("p",null,"第8个车位空"),t(),l("p",null,"1个小车占第9个车位"),t(),l("p",null,"最少3辆车")])])])],-1),x=l("h4",{id:"题目解析",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#题目解析"},[l("span",null,"题目解析")])],-1),w=l("p",null,"这道题的意思应该是：给定了车位占用情况，如 1,1,0,0,1,1,1,0,1，这种车位占用情况，可能停了6辆车，即每个1都停了一个小车，这是最多的情况，但是现在要求最少可能停几辆车。",-1),m=l("p",null,"解题思路也很简单，先把卡车，即111的停车情况先弄出来，再将火车，即11的停车情况弄出来，最后再弄小车1的情况。",-1),f=n('<h3 id="英文输入法" tabindex="-1"><a class="header-anchor" href="#英文输入法"><span><span style="background:red;">英文输入法</span></span></a></h3><h4 id="题目描述-1" tabindex="-1"><a class="header-anchor" href="#题目描述-1"><span>题目描述</span></a></h4><p>主管期望你来实现英文输入法单词联想功能。</p><p>需求如下：</p><ul><li>依据用户输入的单词前缀，从已输入的英文语句中联想出用户想输入的单词，按字典序输出联想到的单词序列</li><li>如果联想不到，请输出用户输入的单词前缀。</li></ul><p>注意：</p><ol><li>英文单词联想时，区分大小写</li><li>缩略形式如”don’t”，判定为两个单词，”don”和”t”</li><li>输出的单词序列，不能有重复单词，且只能是英文单词，不能有标点符号</li></ol><h4 id="输入描述-1" tabindex="-1"><a class="header-anchor" href="#输入描述-1"><span>输入描述</span></a></h4><p>输入为两行。</p><p>首行输入一段由英文单词word和标点符号组成的语句str；</p><p>接下来一行为一个英文单词前缀pre。</p><ul><li>0 &lt; word.length() &lt;= 20</li><li>0 &lt; str.length &lt;= 10000</li><li>0 &lt; pre &lt;= 20</li></ul><h4 id="输出描述-1" tabindex="-1"><a class="header-anchor" href="#输出描述-1"><span>输出描述</span></a></h4><p>输出符合要求的单词序列或单词前缀，存在多个时，单词之间以单个空格分割</p><h4 id="用例-1" tabindex="-1"><a class="header-anchor" href="#用例-1"><span>用例</span></a></h4>',15),k=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("I love you"),l("br"),t(" He")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"He")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},[l("p",null,"从用户已输入英文语句”I love you”中提炼出“I”、“love”、“you”三个单词，接下来用户输入“He”，"),t(),l("p",null,"从已输入信息中无法联想到任何符合要求的单词，因此输出用户输入的单词前缀。")])])])],-1),A=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[l("p",null,"The furthest distance in the world, Is not between life and death, But when I stand in front of you, Yet you don't know that I love you."),t(),l("p",null,"f")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"front furthest")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},"从用户已输入英文语句”The furthestdistance in the world, Is not between life and death, But when I stand in frontof you, Yet you dont know that I love you.”中提炼出的单词，符合“f”作为前缀的，有“furthest”和“front”，按字典序排序并在单词间添加空格后输出，结果为“front furthest”。")])])],-1),v=l("h4",{id:"题目解析-1",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#题目解析-1"},[l("span",null,"题目解析")])],-1),E=l("p",null,"简单的逻辑题，应该是主要考察数组去重，数组字典排序，过滤等知识",-1),B=n('<h3 id="api集群负载统计" tabindex="-1"><a class="header-anchor" href="#api集群负载统计"><span><span style="background:cyan;">API集群负载统计</span></span></a></h3><h4 id="题目描述-2" tabindex="-1"><a class="header-anchor" href="#题目描述-2"><span>题目描述</span></a></h4><p>某个产品的RESTful API集合部署在服务器集群的多个节点上，近期对客户端访问日志进行了采集，需要统计各个API的访问频次，根据热点信息在服务器节点之间做负载均衡，现在需要实现热点信息统计查询功能。</p><p>RESTful API是由多个层级构成，层级之间使用 / 连接，如 /A/B/C/D 这个地址，A属于第一级，B属于第二级，C属于第三级，D属于第四级。</p><p>现在负载均衡模块需要知道给定层级上某个名字出现的频次，未出现过用0表示，实现这个功能。</p><h4 id="输入描述-2" tabindex="-1"><a class="header-anchor" href="#输入描述-2"><span>输入描述</span></a></h4><p>第一行为N，表示访问历史日志的条数，0 ＜ N ≤ 100。</p><p>接下来N行，每一行为一个RESTful API的URL地址，约束地址中仅包含英文字母和连接符 / ，最大层级为10，每层级字符串最大长度为10。</p><p>最后一行为层级L和要查询的关键字。</p><h4 id="输出描述-2" tabindex="-1"><a class="header-anchor" href="#输出描述-2"><span>输出描述</span></a></h4><p>输出给定层级上，关键字出现的频次，使用完全匹配方式（大小写敏感）。</p><h4 id="用例-2" tabindex="-1"><a class="header-anchor" href="#用例-2"><span>用例</span></a></h4>',12),U=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("5"),l("br"),t(" /huawei/computing/no/one"),l("br"),t(" /huawei/computing"),l("br"),t(" /huawei"),l("br"),t(" /huawei/cloud/no/one"),l("br"),t(" /huawei/wireless/no/one"),l("br"),t(" 2 computing")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"2")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},"在第二层级上，computing出现了2次，因此输出2")])])],-1),q=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("5"),l("br"),t(" /huawei/computing/no/one"),l("br"),t(" /huawei/computing"),l("br"),t(" /huawei"),l("br"),t(" /huawei/cloud/no/one"),l("br"),t(" /huawei/wireless/no/one"),l("br"),t(" 4 two")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"0")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},"存在第四层级的URL上，没有出现two，因此频次是0")])])],-1),V=n(`<p>本题的难度主要在于数据结构的定义，我们需要按照下图所示方式，对各层级的关键字进行统计</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                                                  <span class="token comment">// 层级0</span>
  <span class="token punctuation">{</span><span class="token string-property property">&quot;huawei&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                                <span class="token comment">// 层级1</span>
  <span class="token punctuation">{</span><span class="token string-property property">&quot;computing&quot;</span><span class="token operator">:</span> <span class="token number">2</span>，<span class="token string">&quot;cloud&quot;</span><span class="token operator">:</span> <span class="token number">1</span>，<span class="token string">&quot;wireless&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 层级2</span>
  <span class="token punctuation">{</span><span class="token string-property property">&quot;no&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                                        <span class="token comment">// 层级3</span>
  <span class="token punctuation">{</span><span class="token string-property property">&quot;one&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span>                                                       <span class="token comment">// 层级4</span>
 <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>外层是一个数组（数组索引就是层级号），数组元素是一个map结构（key是关键字，val是关键字在对应层级出现次数）</p><p>我们按照这种数据结构收集各条日志URL的组成关键字，就能快速的找到指定层级（通过数组索引）下的指定关键字（通过map结构的key）的出现频次（map结构的val）</p><p>更多细节信息，请看代码注释。</p>`,5),Q=n('<h3 id="提取字符串中的最长合法简单数学表达式" tabindex="-1"><a class="header-anchor" href="#提取字符串中的最长合法简单数学表达式"><span><span style="background:cyan;">提取字符串中的最长合法简单数学表达式</span></span></a></h3><h4 id="题目描述-3" tabindex="-1"><a class="header-anchor" href="#题目描述-3"><span>题目描述</span></a></h4><p>提取字符串中的最长合法简单数学表达式，字符串长度最长的，并计算表达式的值。如果没有，则返回 0 。</p><p>简单数学表达式只能包含以下内容：</p><ul><li>0-9数字，符号+-*</li></ul><p>说明：</p><ul><li>所有数字，计算结果都不超过long</li><li>如果有多个长度一样的，请返回第一个表达式的结果</li><li>数学表达式，必须是最长的，合法的</li><li>操作符不能连续出现，如 +--+1 是不合法的</li></ul><h4 id="输入描述-3" tabindex="-1"><a class="header-anchor" href="#输入描述-3"><span>输入描述</span></a></h4><p>字符串</p><h4 id="输出描述-3" tabindex="-1"><a class="header-anchor" href="#输出描述-3"><span>输出描述</span></a></h4><p>表达式值</p><h4 id="用例-3" tabindex="-1"><a class="header-anchor" href="#用例-3"><span>用例</span></a></h4>',12),J=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"85px"}},"输入"),l("td",{style:{width:"413px"}},"1-2abcd")]),l("tr",null,[l("td",{style:{width:"85px"}},"输出"),l("td",{style:{width:"413px"}},"-1")]),l("tr",null,[l("td",{style:{width:"85px"}},"说明"),l("td",{style:{width:"413px"}},'最长合法简单数学表达式是"1-2"，结果是-1')])])],-1),C=n(`<h4 id="题目解析-2" tabindex="-1"><a class="header-anchor" href="#题目解析-2"><span>题目解析</span></a></h4><p>注意！！！本题原题描述中没有 / 除号</p><p>因此，本题的合法表达式不需要考虑 &#39;/&#39; 号，也就不用考虑除0，以及除法是整除还是小数除的问题。</p><p>另外，本题的 +、-号仅作为运算符号，不作为正负号。因此 &quot;+1&quot;，&quot;-1&quot; 这种不能理解为合法的表达式。</p><hr><p>本题可以分为两步求解：</p><ol><li>找出输入串中最长合法的表达式</li><li>计算最长合法表达式的结果</li></ol><hr><p>关于1的求解，有两种思路：</p><ol><li>双指针</li><li>正则匹配</li></ol><p>其中正则匹配实现起来比较简单，用于匹配合法表达式的正则也不是很难写，对应正则解析如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token punctuation">(</span>\\d<span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">*</span><span class="token operator">-</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>\\d<span class="token operator">+</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p>关于2的求解</p><p><span style="color:red;">对于JS和Python而言，可以使用内置的eval函数计算字符串表达式的结果。</span></p><p>更常规的思路是利用栈结构：</p><blockquote><p>找出最长合法表达式子串后，比如 &quot;1-2*3+10+2&quot;，我们需要注意表达式运算符优先级问题，即先乘，后加减，相同优先级的运算从左到右进行。</p><p>这里我的思路是将 合法表达式串 进行分块，比如上面表达式可以分为：</p><ul><li>1</li><li>-2*3</li><li>10</li><li>2</li></ul><p>我们可以发现：</p><ul><li>+、-运算符前面的操作数都是独立成块，比如上面表达式的操作数1，10</li><li>*运算符前面的操作数则需要组合成块，比如上面表达式的操作数2后面是 * 运算符，因此 2 需要和 3 进行组合。</li></ul><p>分块之后，我们只需要求各块结果之和即可。</p><p>具体逻辑实现如下：</p><ul><li>首先定义一个栈stack，用于保存各个块的结果；</li><li>其次定义一个块的值容器numStr，用于临时缓存分块的值；</li><li>最后定义一个块的系数变量numCoef，用于临时缓存分块的系数；</li></ul><p>扫描合法表达式串，如果当前扫描的字符c是：</p><ul><li>c 是数字，则直接缓存进块的值容器numStr中</li><li>c 是 + 号，则打断前一个操作数的收集，此时我们应该将前一个操作数计算结果后加入到stack中，操作数 = int(numStr) * numCoef，同时更新numCoef = 1，因为c是+号，所以后一个操作数的系数为1</li><li>c 是 - 号，则打断前一个操作数的收集，此时我们应该将前一个操作数计算结果后加入到stack中，操作数 = int(numStr) * numCoef，同时更新numCoef = -1，因为c是-号，所以后一个操作数的系数为-1</li><li>c 是 * 号，则打断前一个操作数的收集，并且 * 前后的两个操作数需要组合，而 * 前面的操作数记录在stack栈顶中，我们可以取出stack栈顶值 记录到 numCoef 中，即 * 前面的操作数，可以当初 * 后面操作数的系数</li></ul></blockquote>`,17),S=n('<h3 id="开源项目热度榜单" tabindex="-1"><a class="header-anchor" href="#开源项目热度榜单"><span><span style="background:cyan;">开源项目热度榜单</span></span></a></h3><h4 id="题目描述-4" tabindex="-1"><a class="header-anchor" href="#题目描述-4"><span>题目描述</span></a></h4><p>某个开源社区希望将最近热度比较高的开源项目出一个榜单，推荐给社区里面的开发者。</p><p>对于每个开源项目，开发者可以进行关注（watch）、收藏（star）、fork、提issue、提交合并请求（MR）等。</p><p>数据库里面统计了每个开源项目关注、收藏、fork、issue、MR的数量，开源项目的热度根据这5个维度的加权求和进行排序。</p><blockquote><p>H = W(watch) x #watch + W(star) x #star + W(fork) x #fork + W(issue) x #issue + W(mr) x #mr</p></blockquote><ul><li>H 表示热度值</li><li>W(watch)、W(star)、W(fork)、W(issue)、W(mr) 分别表示5个统计维度的权重</li><li>#watch、#star、#fork、#issue、#mr 分别表示5个统计维度的统计值</li></ul><p>榜单按照热度值降序排序，对于热度值相等的，按照项目名字转换为全小写字母后的字典序排序（&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,...,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;）。</p><h4 id="输入描述-4" tabindex="-1"><a class="header-anchor" href="#输入描述-4"><span>输入描述</span></a></h4><p>第一行输入为N，表示开源项目的个数，0 ＜ N ＜100。</p><p>第二行输入为权重值列表，一共 5 个整型值，分别对应关注、收藏、fork、issue、MR的权重，权重取值 0 &lt; W ≤ 50。</p><p>第三行开始接下来的 N 行为开源项目的统计维度，每一行的格式为：</p><blockquote><p>name nr_watch nr_start nr_fork nr_issue nr_mr</p></blockquote><p>其中 name 为开源项目的名字，由英文字母组成，长度 ≤ 50，其余 5 个整型值分别为该开源项目关注、收藏、fork、issue、MR的数量，数量取值 0 &lt; nr ≤ 1000。</p><h4 id="输出描述-4" tabindex="-1"><a class="header-anchor" href="#输出描述-4"><span>输出描述</span></a></h4><p>按照热度降序，输出开源项目的名字，对于热度值相等的，按照项目名字转换为全小写后的字典序排序（&#39;a&#39; &gt; &#39;b&#39; &gt; &#39;c&#39; &gt; ... &gt; &#39;x&#39; &gt; &#39;y&#39; &gt; &#39;z&#39;）。</p><h4 id="用例-4" tabindex="-1"><a class="header-anchor" href="#用例-4"><span>用例</span></a></h4>',17),L=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("4"),l("br"),t(" 8 6 2 8 6"),l("br"),t(" camila 66 70 46 158 80"),l("br"),t(" victoria 94 76 86 189 211"),l("br"),t(" anthony 29 17 83 21 48"),l("br"),t(" emily 53 97 1 19 218")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},[t("victoria"),l("br"),t(" camila"),l("br"),t(" emily"),l("br"),t(" anthony")])]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},[l("p",null,"排序热度值计算："),t(),l("p",null,"camila：66*8 + 70*6 + 46*2 + 158*8 + 80*6 = 2784"),t(),l("p",null,"victoria: 94*8 + 76*6 + 86*2 + 189*8 + 211*6 = 4158"),t(),l("p",null,"anthony: 29*8 + 17*6 + 83*2 + 21*8 + 48*6 = 956"),t(),l("p",null,"emily: 53*8 + 97*6 + 1*2 + 19*8 + 218*6 = 2468")])])])],-1),N=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"88px"}},"输入"),l("td",{style:{width:"410px"}},[t("5"),l("br"),t(" 5 6 6 1 2"),l("br"),t(" camila 13 88 46 26 169"),l("br"),t(" grace 64 38 87 23 103"),l("br"),t(" lucas 91 79 98 154 79"),l("br"),t(" leo 29 27 36 43 178"),l("br"),t(" ava 29 27 36 43 178")])]),l("tr",null,[l("td",{style:{width:"88px"}},"输出"),l("td",{style:{width:"410px"}},[t("lucas"),l("br"),t(" grace"),l("br"),t(" camila"),l("br"),t(" ava"),l("br"),t(" leo")])]),l("tr",null,[l("td",{style:{width:"88px"}},"说明"),l("td",{style:{width:"410px"}},[l("p",null,"排序热度值计算："),t(),l("p",null,"camila: 13*5 + 88*6 + 46*6 + 26*1 + 169*2 = 1233"),t(),l("p",null,"grace: 64*5 + 38*6 + 87*6 + 23*1 + 103*2 = 1299"),t(),l("p",null,"lucas: 91*5 + 79*6 + 98*6 + 154*1 + 79*2 = 1829"),t(),l("p",null,"leo: 29*5 + 27*6 + 36*6 + 43*1 + 178*2 = 922"),t(),l("p",null,"ava: 29*5 + 27*6 + 36*6 + 43*1 + 178*2 = 922")])])])],-1),F=l("h4",{id:"题目解析-3",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#题目解析-3"},[l("span",null,"题目解析")])],-1),X=l("p",null,"简单的多条件排序题。",-1),W=l("p",null,"具体逻辑请看代码实现。",-1),Z=n('<h3 id="虚拟理财游戏" tabindex="-1"><a class="header-anchor" href="#虚拟理财游戏"><span><span style="background:cyan;">虚拟理财游戏</span></span></a></h3><h4 id="题目描述-5" tabindex="-1"><a class="header-anchor" href="#题目描述-5"><span>题目描述</span></a></h4><p>在一款虚拟游戏中生活，你必须进行投资以增强在虚拟游戏中的资产以免被淘汰出局。</p><p>现有一家Bank，它提供有若干理财产品 m 个，风险及投资回报不同，你有 N（元）进行投资，能接收的总风险值为X。</p><p>你要在可接受范围内选择最优的投资方式获得最大回报。</p><p>备注：</p><ul><li>在虚拟游戏中，每项投资风险值相加为总风险值；</li><li>在虚拟游戏中，最多只能投资2个理财产品；</li><li>在虚拟游戏中，最小单位为整数，不能拆分为小数；</li><li>投资额*回报率=投资回报</li></ul><h4 id="输入描述-5" tabindex="-1"><a class="header-anchor" href="#输入描述-5"><span>输入描述</span></a></h4><p>第一行：</p><ul><li>产品数（取值范围[1,20]）</li><li>总投资额（整数，取值范围[1, 10000]）</li><li>可接受的总风险（整数，取值范围[1,200]）</li></ul><p>第二行：产品投资回报率序列，输入为整数，取值范围[1,60]</p><p>第三行：产品风险值序列，输入为整数，取值范围[1, 100]</p><p>第四行：最大投资额度序列，输入为整数，取值范围[1, 10000]</p><h4 id="输出描述-5" tabindex="-1"><a class="header-anchor" href="#输出描述-5"><span>输出描述</span></a></h4><p>每个产品的投资额序列</p><h4 id="用例-5" tabindex="-1"><a class="header-anchor" href="#用例-5"><span>用例</span></a></h4>',16),G=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("5 100 10"),l("br"),t(" 10 20 30 40 50"),l("br"),t(" 3 4 5 6 10"),l("br"),t(" 20 30 20 40 30")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"0 30 0 40 0")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},"投资第二项30个单位，第四项40个单位，总的投资风险为两项相加为4+6=10")])])],-1),H=l("h4",{id:"题目解析-4",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#题目解析-4"},[l("span",null,"题目解析")])],-1),K=l("p",null,"第一眼看这题有点像二维费用背包，但是本题备注中有一个关键限制：",-1),z=l("blockquote",null,[l("p",null,"在虚拟游戏中，最多只能投资2个理财产品；")],-1),T=l("p",null,"那么本题其实就变成了：m个理财产品中选1个或2个，所选产品风险值之和 ≤ x，投资额之和 ≤ n，并且最终所选产品的投资回报之和最大。",-1),R=l("p",null,"由于 m 的数量级不大，取值范围[1,20]，因此可以考虑暴力破解。",-1),O=n('<h3 id="掌握的单词个数" tabindex="-1"><a class="header-anchor" href="#掌握的单词个数"><span><span style="background:cyan;">掌握的单词个数</span></span></a></h3><h4 id="题目描述-6" tabindex="-1"><a class="header-anchor" href="#题目描述-6"><span>题目描述</span></a></h4><p>有一个字符串数组 words 和一个字符串 chars。</p><p>假如可以用 chars 中的字母拼写出 words 中的某个“单词”（字符串），那么我们就认为你掌握了这个单词。</p><p>words 的字符仅由 a-z 英文小写字母组成，例如 &quot;abc&quot;</p><p>chars 由 a-z 英文小写字母和 &quot;?&quot; 组成。其中英文 &quot;?&quot; 表示万能字符，能够在拼写时当作任意一个英文字母。例如：&quot;?&quot; 可以当作 &quot;a&quot; 等字母。</p><p>注意：每次拼写时，chars 中的每个字母和万能字符都只能使用一次。</p><p>输出词汇表 words 中你掌握的所有单词的个数。没有掌握任何单词，则输出0。</p><h4 id="输入描述-6" tabindex="-1"><a class="header-anchor" href="#输入描述-6"><span>输入描述</span></a></h4><p>第一行：输入数组 words 的个数，记作N。</p><p>第二行 ~ 第N+1行：依次输入数组words的每个字符串元素</p><p>第N+2行：输入字符串chars</p><h4 id="输出描述-6" tabindex="-1"><a class="header-anchor" href="#输出描述-6"><span>输出描述</span></a></h4><p>输出一个整数，表示词汇表 words 中你掌握的单词个数</p><ul><li>1 ≤ words.length ≤ 100</li><li>1 ≤ words[i].length, chars.length ≤ 100</li><li>所有字符串中都仅包含小写英文字母、英文问号</li></ul><h4 id="用例-6" tabindex="-1"><a class="header-anchor" href="#用例-6"><span>用例</span></a></h4>',16),M=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("4"),l("br"),t(" cat"),l("br"),t(" bt"),l("br"),t(" hat"),l("br"),t(" tree"),l("br"),t(" atach??")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"3")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},'可以拼写字符串"cat"、"bt"和"hat"')])])],-1),Y=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("3"),l("br"),t(" hello"),l("br"),t(" world"),l("br"),t(" cloud"),l("br"),t(" welldonehohneyr")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"2")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},'可以拼写字符串"hello"和"world"')])])],-1),P=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("3"),l("br"),t(" apple"),l("br"),t(" car"),l("br"),t(" window"),l("br"),t(" welldoneapplec?")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"2")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},'可以拼写字符串"apple"和“car”')])])],-1),I=l("h4",{id:"题目解析-5",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#题目解析-5"},[l("span",null,"题目解析")])],-1),_=l("p",null,"本题可以分别统计出chars和word中各字符的数量，然后遍历word每个字符c，比较word和chars中统计的c字符数量，如果word的c数量超过了chars的c数量，那么就就将超出数量计入diff中。",-1),j=l("p",null,"最终比较diff和chars中万能字符‘?’的数量，如果chars中万能字符‘?’的数量 >= diff，那么说明chars可以使用万能字符补足不同部分，即可以学会word。",-1),D=n('<h3 id="寻找身高相近的小朋友" tabindex="-1"><a class="header-anchor" href="#寻找身高相近的小朋友"><span><span style="background:cyan;">寻找身高相近的小朋友</span></span></a></h3><h4 id="题目描述-7" tabindex="-1"><a class="header-anchor" href="#题目描述-7"><span>题目描述</span></a></h4><p>小明今年升学到了小学1年级来到新班级后，发现其他小朋友身高参差不齐，然后就想基于各小朋友和自己的身高差，对他们进行排序，请帮他实现排序。</p><h4 id="输入描述-7" tabindex="-1"><a class="header-anchor" href="#输入描述-7"><span>输入描述</span></a></h4><p>第一行为正整数 h和n，0&lt;h&lt;200 为小明的身高，0&lt;n&lt;50 为新班级其他小朋友个数。</p><p>第二行为n个正整数，h1 ~ hn分别是其他小朋友的身高，取值范围0&lt;hi&lt;200，且n个正整数各不相同。</p><h4 id="输出描述-7" tabindex="-1"><a class="header-anchor" href="#输出描述-7"><span>输出描述</span></a></h4><p>输出排序结果，各正整数以空格分割，</p><p>和小明身高差绝对值最小的小朋友排在前面，</p><p>和小明身高差绝对值最大的小朋友排在后面，</p><p>如果两个小朋友和小明身高差一样，则个子较小的小朋友排在前面。</p><h4 id="用例-7" tabindex="-1"><a class="header-anchor" href="#用例-7"><span>用例</span></a></h4>',12),$=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("100 10"),l("br"),t(" 95 96 97 98 99 101 102 103 104 105")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"99 101 98 102 97 103 96 104 95 105")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},"小明身高100，班级学生10个，身高分别为95 96 97 98 99 101 102 103 104 105，按身高差排序后结果为：99 101 98 102 97 103 96 104 95 105。")])])],-1),ll=l("h4",{id:"题目解析-6",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#题目解析-6"},[l("span",null,"题目解析")])],-1),tl=l("p",null,"考察多条件排序。",-1),el=n('<h3 id="精准核酸检测" tabindex="-1"><a class="header-anchor" href="#精准核酸检测"><span><span style="background:cyan;">精准核酸检测</span></span></a></h3><h4 id="题目描述-8" tabindex="-1"><a class="header-anchor" href="#题目描述-8"><span>题目描述</span></a></h4><p>为了达到新冠疫情精准防控的需要，为了避免全员核酸检测带来的浪费，需要精准圈定可能被感染的人群。</p><p>现在根据传染病流调以及大数据分析，得到了每个人之间在时间、空间上是否存在轨迹交叉。</p><p>现在给定一组确诊人员编号（X1,X2,X3,...,Xn），在所有人当中，找出哪些人需要进行核酸检测，输出需要进行核酸检测的人数。（注意：确诊病例自身不需要再做核酸检测）</p><p>需要进行核酸检测的人，是病毒传播链条上的所有人员，即有可能通过确诊病例所能传播到的所有人。</p><p>例如：A是确诊病例，A和B有接触、B和C有接触、C和D有接触、D和E有接触，那么B\\C\\D\\E都是需要进行核酸检测的人。</p><h4 id="输入描述-8" tabindex="-1"><a class="header-anchor" href="#输入描述-8"><span>输入描述</span></a></h4><p>第一行为总人数 N</p><p>第二行为确认病例人员编号（确诊病例人员数量 &lt; N），用逗号分割</p><p>第三行开始，为一个 N * N 的矩阵，表示每个人员之间是否有接触，0表示没有接触，1表示有接触。</p><h4 id="输出描述-8" tabindex="-1"><a class="header-anchor" href="#输出描述-8"><span>输出描述</span></a></h4><p>整数：需要做核酸检测的人数</p><ul><li>人员编号从0开始</li><li>0 &lt; N &lt; 100</li></ul><h4 id="用例-8" tabindex="-1"><a class="header-anchor" href="#用例-8"><span>用例</span></a></h4>',15),nl=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("5"),l("br"),t(" 1,2"),l("br"),t(" 1,1,0,1,0"),l("br"),t(" 1,1,0,0,0"),l("br"),t(" 0,0,1,0,1"),l("br"),t(" 1,0,0,1,0"),l("br"),t(" 0,0,1,0,1")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"3")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},[l("p",null,"编号为1、2号的人员，为确诊病例。"),t(),l("p",null,"1号和0号有接触，0号和3号有接触。"),t(),l("p",null,"2号和4号有接触。"),t(),l("p",null,"所以，需要做核酸检测的人是0号、3号、4号，总计3人需要进行核酸检测。")])])])],-1),sl=n('<h4 id="题目解析-7" tabindex="-1"><a class="header-anchor" href="#题目解析-7"><span>题目解析</span></a></h4><p>即将有接触的人进行合并操作，纳入到同一个连通分量中。比如matrix[i]][j] == 1，即 i 和 j 就处于同一个连通分量中，需要进行合并。</p><p>另外，本题的接触关系矩阵matrix是沿对角线对称的，因此只需要遍历对角线一边即可。</p><p>当遍历完所有接触关系后，就可以求解每一个连通分量中的节点数，即每个接触群体的人数，求解原理如下：</p><blockquote><p>并查集底层的fa数组，fa数组索引代表每个节点，fa数组元素代表对应索引的节点的根节点，而同一个连通分量中的节点的根都是相同的，因此，我们需要对fa每一个数组索引找一下根，这里可以使用并查集的find操作（递归实现），最后统计同一个根下的节点数量，即为同一个接触群体的人数。</p></blockquote><p>当每个接触群体人数求解出来后，我们只需要统计”确诊病例人员编号“对应的根（连通分量）下的人数即可。</p><p>最后的统计的总人数需要减去确诊病例的数量，因为题目说：</p><blockquote><p>确诊病例自身不需要再做核酸检测</p></blockquote><p>本题需要注意的是，有可能多个确诊病人在同一个连通分量重，此时需要注意避免重复统计。</p>',9),al=n('<h3 id="最长子字符串的长度-一" tabindex="-1"><a class="header-anchor" href="#最长子字符串的长度-一"><span>最长子字符串的长度（一）</span></a></h3><h4 id="题目描述-9" tabindex="-1"><a class="header-anchor" href="#题目描述-9"><span>题目描述</span></a></h4><p>给你一个字符串 s，首尾相连成一个环形，请你在环中找出 &#39;o&#39; 字符出现了偶数次最长子字符串的长度。</p><h4 id="输入描述-9" tabindex="-1"><a class="header-anchor" href="#输入描述-9"><span>输入描述</span></a></h4><p>输入是一个小写字母组成的字符串</p><h4 id="输出描述-9" tabindex="-1"><a class="header-anchor" href="#输出描述-9"><span>输出描述</span></a></h4><p>输出是一个整数</p><h4 id="备注" tabindex="-1"><a class="header-anchor" href="#备注"><span>备注</span></a></h4><ul><li>1 ≤ s.length ≤ 500000</li><li>s 只包含小写英文字母</li></ul><h4 id="用例-9" tabindex="-1"><a class="header-anchor" href="#用例-9"><span>用例</span></a></h4>',10),il=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},"alolobo")]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"6")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},`最长子字符串之一是 "alolob"，它包含2个'o'`)])])],-1),dl=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},"looxdolx")]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"7")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},`最长子字符串"oxdolxl"，由于是首尾连接一起的，所以最后一个'x'和开头的'l'是连接在一起的，此字符串包含2个'o'`)])])],-1),pl=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},"bcbcbc")]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"6")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},`这个示例中，字符串"bcbcbc"本身就是最长的，因为'o'都出现了0次。`)])])],-1),rl=l("h4",{id:"题目解析-8",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#题目解析-8"},[l("span",null,"题目解析")])],-1),hl=l("p",null,"本题很简单，只要统计出输入字符串s中'o'的个数：",-1),ol=l("ul",null,[l("li",null,"如果 'o' 为偶数个，则s本身就是一个含有偶数个'o'的子字符串，结果输出s.length"),l("li",null,"如果 'o' 为奇数个，由于s是环形的，因此只要任选环中任意一个'o'解开（删除），剩下的就是含有偶数个 'o' 的子串，该子串长度为 s.length - 1")],-1),cl=n('<h3 id="最长的指定瑕疵度的元音子串" tabindex="-1"><a class="header-anchor" href="#最长的指定瑕疵度的元音子串"><span>最长的指定瑕疵度的元音子串</span></a></h3><h4 id="题目描述-10" tabindex="-1"><a class="header-anchor" href="#题目描述-10"><span>题目描述</span></a></h4><p>开头和结尾都是元音字母（aeiouAEIOU）的字符串为元音字符串，其中混杂的非元音字母数量为其瑕疵度。比如:</p><ol><li>“a” 、 “aa”是元音字符串，其瑕疵度都为0</li><li>“aiur”不是元音字符串（结尾不是元音字符）</li><li>“abira”是元音字符串，其瑕疵度为2</li></ol><p>给定一个字符串，请找出指定瑕疵度的最长元音字符子串，并输出其长度，如果找不到满足条件的元音字符子串，输出0。</p><p>子串：字符串中任意个连续的字符组成的子序列称为该字符串的子串。</p><h4 id="输入描述-10" tabindex="-1"><a class="header-anchor" href="#输入描述-10"><span>输入描述</span></a></h4><p>首行输入是一个整数，表示预期的瑕疵度flaw，取值范围[0, 65535]。</p><p>接下来一行是一个仅由字符a-z和A-Z组成的字符串，字符串长度(0, 65535]。</p><h4 id="输出描述-10" tabindex="-1"><a class="header-anchor" href="#输出描述-10"><span>输出描述</span></a></h4><p>输出为一个整数，代表满足条件的元音字符子串的长度。</p><h4 id="用例-10" tabindex="-1"><a class="header-anchor" href="#用例-10"><span>用例</span></a></h4>',12),ul=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("0"),l("br"),t(" asdbuiodevauufgh")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"3")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},"无")])])],-1),bl=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("2"),l("br"),t(" aeueo")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"0")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},"无")])])],-1),gl=l("h4",{id:"题目解析-9",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#题目解析-9"},[l("span",null,"题目解析")])],-1),yl=l("img",{alt:"",height:"799",src:"https://img-blog.csdnimg.cn/75a9cd9bc529429498db58f1cc4ef433.png",width:"1200"},null,-1),xl=l("p",null,"当两指针之间划定的子串的瑕疵度diff 大于 指定的瑕疵度flaw时，则左指针 l++",-1),wl=l("p",null,"当两指针之间划定的子串的瑕疵度diff 小于 指定的瑕疵度flaw时，则右指针 r++",-1),ml=l("p",null,"当两指针之间划定的子串的瑕疵度diff 等于 指定的瑕疵度flaw时，则记录当前子串长度，并r++",-1),fl=l("p",null,"按以上逻辑，直到r指针移动到idxs数组的尾部。",-1),kl=l("p",null,[l("img",{src:"https://cdn.staticaly.com/gh/BZT2017/oss-img@main/eb378b5515874c268c7f1fe75ad03674.png",alt:"",loading:"lazy"})],-1),Al=l("p",null,[l("img",{src:"https://cdn.staticaly.com/gh/BZT2017/oss-img@main/75a9cd9bc529429498db58f1cc4ef433.png",alt:"",loading:"lazy"})],-1),vl=n('<h3 id="最富裕的小家庭" tabindex="-1"><a class="header-anchor" href="#最富裕的小家庭"><span>最富裕的小家庭</span></a></h3><h4 id="题目描述-11" tabindex="-1"><a class="header-anchor" href="#题目描述-11"><span>题目描述</span></a></h4><p>在一颗树中，每个节点代表一个家庭成员，节点的数字表示其个人的财富值，一个节点及其直接相连的子节点被定义为一个小家庭。</p><p>现给你一颗树，请计算出最富裕的小家庭的财富和。</p><h4 id="输入描述-11" tabindex="-1"><a class="header-anchor" href="#输入描述-11"><span>输入描述</span></a></h4><p>第一行为一个数 N，表示成员总数，成员编号 1~N。1 ≤ N ≤ 1000</p><p>第二行为 N 个空格分隔的数，表示编号 1~N 的成员的财富值。0 ≤ 财富值 ≤ 1000000</p><p>接下来 N -1 行，每行两个空格分隔的整数（N1, N2），表示 N1 是 N2 的父节点。</p><h4 id="输出描述-11" tabindex="-1"><a class="header-anchor" href="#输出描述-11"><span>输出描述</span></a></h4><p>最富裕的小家庭的财富和</p><h4 id="用例-11" tabindex="-1"><a class="header-anchor" href="#用例-11"><span>用例</span></a></h4>',11),El=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("4"),l("br"),t(" 100 200 300 500"),l("br"),t(" 1 2"),l("br"),t(" 1 3"),l("br"),t(" 2 4")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"700")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},[l("p",null,[l("img",{alt:"",height:"223",src:"https://img-blog.csdnimg.cn/d42fa1105adb4ffa9d61f8504727b4a5.png",width:"294"})]),t(),l("p",null,"成员1，2，3 组成的小家庭财富值为600"),t(),l("p",null,"成员2，4 组成的小家庭财富值为700")])])])],-1),Bl=l("h4",{id:"题目解析-10",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#题目解析-10"},[l("span",null,"题目解析")])],-1),Ul=l("p",null,"简单的逻辑分析题。",-1),ql=l("p",null,"由于题目输入会给出 树形结构 中，父节点->子节点 的信息，比如下面红色部分",-1),Vl=l("p",null,"4",-1),Ql=l("p",null,"100 200 300 500",-1),Jl=l("br",null,null,-1),Cl=l("br",null,null,-1),Sl=n('<h3 id="最多购买宝石数目" tabindex="-1"><a class="header-anchor" href="#最多购买宝石数目"><span>最多购买宝石数目</span></a></h3><h4 id="题目描述-12" tabindex="-1"><a class="header-anchor" href="#题目描述-12"><span>题目描述</span></a></h4><p>橱窗里有一排宝石，不同的宝石对应不同的价格，宝石的价格标记为 gems[i]</p><p>0 ≤ i &lt; n n = gems.length 宝石可同时出售0个或多个，如果同时出售多个，则要求出售的宝石编号连续；</p><p>例如客户最大购买宝石个数为m，购买的宝石编号必须为：gems[i]，gems[i+1]，...，gems[i+m-1]</p><p>0 ≤ i &lt; n m ≤ n 假设你当前拥有总面值为 value 的钱，请问最多能购买到多少个宝石，如无法购买宝石，则返回0。</p><h4 id="输入描述-12" tabindex="-1"><a class="header-anchor" href="#输入描述-12"><span>输入描述</span></a></h4><p>第一行输入n，参数类型为int，取值范围：[0,10^6]，表示橱窗中宝石的总数量。</p><p>之后 n 行分别表示从第0个到第n-1个宝石的价格，即 gems[0] 到 gems[n-1] 的价格，类型为int，取值范围：(0,1000]。</p><p>之后一行输入v，类型为int，取值范围：[0,10^9]，表示你拥有的钱。</p><h4 id="输出描述-12" tabindex="-1"><a class="header-anchor" href="#输出描述-12"><span>输出描述</span></a></h4><p>输出int类型的返回值，表示最大可购买的宝石数量。</p><h4 id="用例-12" tabindex="-1"><a class="header-anchor" href="#用例-12"><span>用例</span></a></h4>',13),Ll=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("7"),l("br"),t(" 8"),l("br"),t(" 4"),l("br"),t(" 6"),l("br"),t(" 3"),l("br"),t(" 1"),l("br"),t(" 6"),l("br"),t(" 7"),l("br"),t(" 10")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"3")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},[l("p",null,"gems = [8,4,6,3,1,6,7], value = 10"),t(),l("p",null,"最多购买的宝石为gems[2]至gems[4]或者gems[3]至gems[5]")])])])],-1),Nl=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("0"),l("br"),t(" 1")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"0")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},[t("gems = [], value = 1"),l("br"),t(" 因为没有宝石，所以返回0")])])])],-1),Fl=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"84px"}},"输入"),l("td",{style:{width:"414px"}},[t("9"),l("br"),t(" 6"),l("br"),t(" 1"),l("br"),t(" 3"),l("br"),t(" 1"),l("br"),t(" 8"),l("br"),t(" 9"),l("br"),t(" 3"),l("br"),t(" 2"),l("br"),t(" 4"),l("br"),t(" 15")])]),l("tr",null,[l("td",{style:{width:"84px"}},"输出"),l("td",{style:{width:"414px"}},"4")]),l("tr",null,[l("td",{style:{width:"84px"}},"说明"),l("td",{style:{width:"414px"}},[t("gems = [6, 1, 3, 1, 8, 9, 3, 2, 4], value = 15"),l("br"),t(" 最多购买的宝石为gems[0]至gems[3]")])])])],-1),Xl=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("9"),l("br"),t(" 1"),l("br"),t(" 1"),l("br"),t(" 1"),l("br"),t(" 1"),l("br"),t(" 1"),l("br"),t(" 1"),l("br"),t(" 1"),l("br"),t(" 1"),l("br"),t(" 1"),l("br"),t(" 10")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"9")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},[t("gems = [1, 1, 1, 1, 1, 1, 1, 1, 1], value = 10"),l("br"),t(" 最多购买的宝石为gems[0]至gems[8]，即全部购买")])])])],-1),Wl=l("h4",{id:"题目解析-11",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#题目解析-11"},[l("span",null,"题目解析")])],-1);function Zl(Gl,Hl){const s=d("SandPack"),a=d("font");return o(),r("div",null,[u,h(" ### <font color='red'>停车场车辆统计</font> "),b,g,y,x,w,m,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJx1U1FP01AU/isne2mbzJXJG26LxCdM9GW+OR9KdyeN3W29vZ2SZQkQgS3CRgIxOolhigiJCfgiuk34MdJue+IveG7vuiBomrS35/vud757zrnVhO4xU5913VTFJ4mZRMYzmeVy8Aj33VyBWmXXYRyqwEgJalBiThkUpCp3CrRAbcIR8CArYFVRNBmyqOvzPGdxPJ1MJ6fwEV+xSgtiyacmtxwKJarGGzSoYsoSTALZLIqiCPcZBcMmjKvK8Ph0eLYdrH6+7C8LIQBdh+BkLWwshbuNy/5G0OyFzYYAhBnTYMJgrJhixLUNk8zatqok8ZlIjDrdoNsKzuqj9c3hwfLvpZVgtT7RTafT4fvzcPNjWN+aFknWNq9gE+i2gHYP0cLo3b5Ep0SocXTx4/Wg/So4+Ra+PZbA8NfB8GxNZBces+L1lztMif6mFe1aFIO3rwWnJgfBdqQqhu0TPHOkaBP6lC8UaK1AM7rsLvYVfzgpowAn+AeQcXPBfjv82pGlHewcDo664V5/1N4J+ksZXcwCsqIqQuVW2SkSO6vERVVAl/i8zzm29K5pW+azrHK1tQrkBis/g/Xe8Hxr2NnI6JIr9y2kcxe9T4O9ZQkOetvhh93LfrsqBs+DWi2jI0Wc4Ipr8WDfHuWlZ/Fe70Yh06EeTqYdDeBz32JEVRgxirZFCVbOxDUnc5QTVsIKqlU5HTPgMscknpfyeNGiUNNwyFGtYjCwkCvU7Mf5xfK8Y6cMb5Gacxg1uMOeqGPqOPE4FW6IaKBqkM2BarwwLLwduClFyUuuappsVXSXRCLHKiIr2jK5HrgXLwWiOCaRuphmqRTnibPXtP/6iMtQSMTBQkJwI/Z9o2Lk5b1/iI2F2XsPwsNO0G9B2PwS1L8HrZNxiZunQevNzRJLxZt1Hfv+V3WTY8zx+XUQQxKNGhCtmJ1yKJqXxpOgikVUVJkjYiZqfwBme+66",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),f,k,A,v,E,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJxtVF9r01AU/yqHviSBLsHX2RbnW587EF0npMkNvS69N97ctJulsIlaB9scbqLUOTbcREEtiCC2xX2ZJe2e9hU8N2nrHiQQbs75/c753fMn7ZwVCsdaCgKzGZHcYq4QOoIGEkIio6BUZbQRcCGhDYJ40AFP8AZoCNVuV1mV+USiI4SicuuaZmQmSdbl1FbNLdcJeJGQdRJKcGkobeYQoAzQAi0ufDcP5RAYl1AjskUIA596BGzmgktsWc/D3UhCq46OMii6q9iohEngHmzwKA/3MSsewOVMk7DGeAvD2xIJPm8S5TKruak6yoJIVqS4qdqLmCMpx7BMV+rzc5QB7SoDoB7oM1OxiBzkykgwsH0ipK5N+r8mfw7i5+fXoy0VEMCyIH75It7+kWxvJkfb496zqw/H8be3SX/3erQT7w2vursKpyTZQqlZMU2TkRZUiExFmGHgU6lbKw/thSdLCw9WLcNYnYbGOggZ3qOyfj3qJe/68f6ny+H5TGE82ozPfmLKePfNpJ+mQc7kopsMz+LuYPz+e3LSzXyoJdl7HQ9eKRD20mzafkRQDWoyPepLInSdGsVSWgYFSa9NzX8K5oUxQGE6hhnizOiG+YhTpmug6tGpsoKVzRZOFX5I0gh8WxL8AigEpfisl3w9zWo4Pvw8/jJITkZXvUO8SsFSk4ioNA80FxrcJX5RUzXSwCoVauK//pkshUn9tUhK7PEdx6fOWlGb9XouX4PS+OnvuDucXOxPTncKVkbIyPVbpcvhx/HJVuYcDw+S4yMsflvtRgidTsFCiLrmjaupByu/XMkupt7dQWpyOMN9EH46hY8jKoiuCWK7PmVEM0wHz5KUGZbfsx2it7OBXIRAcIeEIZbfxS3oGLiHGK1pC6CIVdH8lcpGo8Z90w43mFNGqy25WNWn0GniaSrVaAUD3YBiCXS7ZVNcESThKK5jE41sINJ1V4k4dRGVUuZLg1ycDvTCNLr6I2SRZnlm2TtGesp1/gJ2YsMa",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),B,U,q,t(" #### 题目解析 本题应该就是一个逻辑模拟题，以及考察集合的应用。 "),V,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJyFVM1u00AQfpWhF9sq2A0Sl5JEcORcbmkOrrOhK+y1Wa9TqmCJVuK/ICQQoPKjVlAKUlGBC7SJ6MvUTnrqKzDr9SZtKZBIye7MN9/87Mx0J5yYe87lKLI7CZmYnqjGHqeRgJiIJKrPMhpEIRfQBU7akEKbhwEYCDUuzrJZ5hOBihhqUm0ahqVELAm06IKWURYlYkZwrTgPXhigiLJrGuJGdETlzCfuAqHOCOSw0AkZgT8UWjLW+GHSOglfoJz4JI5LuXTZTpgnaMigzUyM+KyO8KyMw4IuJt8GU0trNUwPYxMJZ+D6hAvTGG7/GP56lt3ZOOwvSUYAmYZPOsTHPLSlHUc+RTQYVmOqqVGBK7z5v6AqIxQjYiHk12VZZFRHQGOeCJWNblrYOA4cLD3OntzNX25key+lSFPYiDRNatXqmBngpyg55+6ijEIzO4r5CFP2bXmwu3nYXxlsbU3hJf/6c7j3Jv++nr95gNL93pNK1r+dbT5Sdu2Qg6kevEVuInXlYnmsKm+2T9g1MV9KJyeLSktLwI5gsQB8p4AwIVOW+EaBa2K/KRBtm2cwlVJsdWWk2cfl/F0Z0yje7P7rrLerrtoYZL1KU3TQbZTOmtOVVGNS4sdkFFNRiZL/GPmH/MWX4faGkuzvPMoePM5fbWdPPyq/Y3sMeOx05PBI2sfDGiEmJ6XrY05v97OHa5WxXYrFisl/meQrFFz60bL7b/HBspUXJ6szLoI6FH9p0RI453bH9ROCbNJH0ebNRtHHTbh1C6ZmGcKrjtoguDvwIkgQ+a4geAOoRvXsw2q+ta6GZvD80+Dzbr7WP1h9jh1UdeS+QVQxEdA5F4Qt4tcMHE0DnHp1jp+qlmPxL72er2OYuUQIHPxLnk+96zXj1AVgQH2wvJPd6w33ng7XV6qOMlIE85X6fu/9YG1JKQe9Z9gfh/3VrlyUMaRp1UGIrMaRCsgvvsLVGZW//L2HfYIi1fhcbg1ObiS4q0yDE7flU7mqbA/PglxhgvC26xGzq7bGNEQ89HCp2bFoUYbvhEOCbB2XA0WsZPMbM4vBXOjbbrzIvCsodUXIm2YJLR2XruTISRiYFtTqYLoLLsVBRiObkZvCtCzVAcXul45C2kJUYTLapmiL/YhaPc/F8iqYtB/tPbWK00T6Gw/th+Y=",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),Q,J,C,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJxVU1Fr1EAQ/ivjvSRpaWJ9rEnQBx8KvlV8afqQy+21wb1N3GyuV45AK8q1ICq0RTiLtGhBQbSIILZn+2dMcn3qX3A2e7m2d5BMZr6Z+Wb2237DSnhgPYxjs5uSxkLDTgIexgISItLY9VjYiSMuoA+ctCGDNo86oCFUu+8xj1EiMJCAI8O6phnKFbI4FUuC1/75uXt+M2jJcDtlgQgjBm2m1zAD+tioDVOH42ApTBUpZ+BTwoWujX/8Hp/v5q+Or0ZbshBAELFEtl/FNpaue15rdnl2Zm7FmJGmYa1WFAF/klPH7z0m7FEvRrTX8BoYrEM4wVOfol/TlNOyoNg5z7dP8u1BvvOzHL4sDjYv9y/K7+/z0VuFWV8LKQFdnyYjEZP0SHA9lgF3HGAppdWAMqkmTSoaKnX57sqUKIBcA0ZNStiqWAP3mvfEdaMW3BoKsyYzAWTKmLxwHNL1aT74W+yflB9+FW+OxxfvcBgZRhImBlMiS6ChT2vikrGAbSlFoBbwQ5BOTH1B8AvAjt3887D4dqQOptz7Un49LQ5Hl8O9fLRpW1I/iKr2Ad25TtQi1NHq9WhguXaTK0wzFQJF8SCgYfDM0W6KQwO3fPEnH5wh5/HRa9tSWJW3Nu/+O/tUHm6pYHm2W3w8uBoN+1KwCWSZbSFETnGDufzjTp4sKd7yOTitXBNJqeN8noac6BonfouGjGiGGaAtyCIThLf9gOh9pfQFiHkUkCQxE9EKGWQGHgRW6/ocQsTKanR5aaPTjKjpJxssWESvLyK+ok+gtZZVK0yoYKAb4Lig++t+iLcKk0xGekI3DHVklW5koyhsIapKmV4wzEWlYLQWnbymqlLdp+6eGZXVyP4DseWELg==",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),S,L,N,F,X,W,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJydVVFv2zYQ/iu3PETUkkiWrTqOa7srhj0U2Fv25viBVuiamERpFOUsMAysA4a+7GFA+xQMQ4ttwAYU6GPRJmj/TBOnT/0LPYqUHAdBERQCxOPdd3e8491xvuHnMvLvZ5k3K9hGd6OXR5JnCnKmimxwIHiSpVLBHCSbwAImMk3AQahz90AciJgpFOTQ12IyHLmGJYrEspzQsbwjxh9OVQV1OtCGJuC/knORFWpfyaBCRDThMYV2G3YbELYhuNOBTuM6vFnBZzxSqeQU9kLYbUMHFTp70AyC6xqtSoMKNU3FMTT3INiFTgvBEHauw8MKzvA4x3CnBXu7EECgbZfgSSEixVMBE0Ew8G0b6HYdUE01a6pVU6EL8wMBOovejMYFQ3fDEeZ9AuQrbW9z0xrc3KwtrsjmimytyNB10aAqpAAaM6mIc/ny1eXbJ+e//fvx7JE+NECUiry6lftSolvrx8uzmKMKGFydCwMa1oe4gltFeBOzdRMzvMLEcI2fhGY2fIBJKoGUzpHVuItLrz6HFzPxUE2RubVl8wda2cuKfErsHkDQhHVrpSEfDRuj7UqIye4Cwz+pc4Bi+HoNH4xga5UjvV2XN9fluF2Xt9bluF2Xh7pj9GkW5brQPx1Hjj1HCN0eu/2BDYdPCNUVAv0+jDVRBw5APR0q5skQnkq/T4+Y/JbmjFgHgEoWZIibQVXVWGwFhnvQgG7FHljuPeyDLuwENgSzWAvlEWEHVXAtYyt96ODwZr+j0ZSwmCVMKOgPqkjqJjAXaQGlL5MfF6cO+un5ZkrhfMKNYkkWU8VwB9DLBuf/nFy8eG7Kffn0v+X/by6enX04eXp+9kvP1zMNUeUlwGwnSQ9Z3HewzxzwB72xvFFsO+NzkLotbgNq3gbUug0oXAONC6VwEH0TxTz6se984UByYLD89fX549PLd39cPv+95xuzxsU0GLw//Xv57JERLk+fXPz158ezk7l+IXJYLHo+QvQVXbkW/fk+/LBvLkX/H78pWWYKSaxqVP+p4JIRRzJ6GHPBHNeLkFbsgVBMTmjEyNx0TxcymUYsx1mlDrkwdYHWZlQCR6y2Fg/3j5NxGns0PxbRA+RSfB9GxEKtY+tKt46GAXF1ORJ6RDlOHlTyBPtZEdc1dVk+etpRyg8RVarU8x91sY5RWg1X/dgZS5WfyvvCLamNxSd3aZFq",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),Z,G,H,K,z,T,R,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJyVlktv20YQgP/KwBeStaOHJfeQSEJzaIAc2otzCGoJBSUtYbYUyS6XflQRYCfxK7HdFE6K2kmDuHGaug+0l6CqpbZ/RtTjpL/QWS5JUY7gOBBEze5+M7M7M9xRfSrp0Eryum0nllwydXUq51SobjNwCHPtQtHUa7ZFGdSBEg0aoFGrBhKi0rWiWTQNwnDBgTxflhdKipjSTdtl84ymgwVpDtKpFH6lc8BsCKRTMJuCTAqyKZh7C8uEWAayMAcfTrCUDRFhBp9oKeNjmmtWmG6ZoJlytLOZaAuRlImkrAL1oglQsUyHwYLp1mZuffbxzI3bJfQSmUg4tqEzWQJJSdRUW/7UrZUJRYeh4mLZiPGz7+S1lRieeSfOviYxPnsBzwNVU1c+XyyjQorP6BqMYpHPS9KdO9E+x4eZ8WGWDxUMNXOpCapBKLrs//FX/98Db+PVsL3OIw6gWRRkkZ8q4cdKXQvEHGA4g8H0dBBogGQSvJ/udp8/8/aedJq/dM5eewfrg5f7g8NT789vOmf73Wdr3slrMSNUdE3WVhZ8Q6XcjdtKYEkc1zKJOO4nKltM1HRTxnAF8AxgNhX4gCcomApV0abQLIh4jYzCKIKCGC3gG5BYUg2Xp8Mky3CdUnVVxmMqCU03DDnlh+QcGzhGldHGQqwRCjwq2yfd737vNE+iqPSO7nfvbXibb4bt7U5zr792r3/4be9p03u0K4Bheyc0MMqDXyo85mkMfpSFWAbGshD3d3EWzmdimkulXD6ekND00+fdB696+1uDX7/nh3jwpP/m/uDHH7yN7e7DnW7reNje9XZOO82HY6ube972Zq91GKl3/tlHIG6cn5AtW5Myfi7bJZgGGSfgymRuclkEhxQuJpTGWHkIanzxfUrk0mXyFhphY0hUTTExEPwf/xHfYCQnvrAwPPxGKZpI5ZKiOWBbwAEjNdtQGcERQM4ueCdH3d+OxT3Qe/xz7/Ss+6I9OHrstddySd5KkPJvEVi6UrOqxMhL0Q0kQbKQK9MLodnLQJnLQNkxqOwyhs3ho4qhV77MS+/RJCQo9O7+7W21+v896h/v5pLClDC7mC50Wi97L9bFYq91gK/VsH1U563UgUYjl0SEBzUWSP7BF+XWvAgjf26d+VPiyqe8oVDylatTIkuUqFVDNwle+BWUGblpMkI1tULkuugLV8GmVoU4TsJhVd2EhoJtG60tqRR0ZLk1Y2F+tVa2jITqrJqVmzirMouW5AANHAeuUMHHQFYgXwBZXVZ1vFxQKWGSFSYriqgc/98Bd2TpVaR8lagPoy6+O7gadjL+B0JYCv2E3huKL001/gcBXy58",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),O,M,Y,P,I,_,j,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJx9VV9v00gQ/yqrvthRW5v2EeJwPNwDz723tkKOs77s4ax963WBC5EKHNf704NKFB3XgxPouAoQpUVCamgCfJk4Tp/6FZjZtR23EiRS4p39zW9mfjs77s7YsfDsS1FkrSV05vxMPfYEiySJqUyixgpnnSgUknSJoD7pEV+EHWIA1Liwwld4QCVsxMTBbfNcTVsYjxK5JMVCbjc8V5KmJG34k4JS4wxuscC50vXaFy/ivp9wT7KQE5+bJd9c6VEj3RVOMLa15gYJBYZzaGA+mcIdxzBu3ix9cFkDF5kITtyACmkak/3DyccH6d3/T4a3MCwhmJgrVO4lkRVHAQM0mUJiKS4JUQEtFqBTNFja8mphuMZ/8otMbZukv/6S7Q68tiviUX8v2/l51N+Y3PmQ7v2Vvd5FjA5i+aH4FoQxaUA7lEviNHT1SDJ5c5B+eFh1VDyvxg8PNIT5hR/UD9LmnkQlMzurVz0axLTcse3Rpyfp3qN08/3x3T+n6eAHa7KiJC6zUdUCA/711ALV+2rOZHz4dvzH4eTdE21BafzmFfADcVSAH0LGUcnTmpbKY8PlxGcRyP74lc581P8dxND5VyVBFh7CmQENslkB5d/LdklwvL6F8P3tycc72qhQRUmmz+b8K4y36PVapS5CAEBMJPf0Lh71hXJRz2vMo5Ubs7N5M+uPF/IYGBg4a/xyjluFG1eAsHl2b4//fZz908/2fjsZbqb3Bsd/P6+emG6p06en2sFnjuOxaSOo1HVqKKZHzTzi3EIuahm0lLZkBlHTjfuj/noVqcSdn6+amoK6V6cG1S6Vh14tr+5LQcaP9tOt3fTg/ujo3tlroqpSMesOdjVe8nwu6AZX7BCpbuvpBnMNFpJ2osCVFFaE1KNG+nxn/PqZHgfZ9ovs5dH46fB4ZzsdrtdtnIWAUredrM13whYNHKOcEAaxG/Wm+Cpo8RSomUgJ4+0bDxS/6hhfGHMGaWS336cbg8mnrcmzzbqt3TRFe6ExGvyXPb2lN7PBA+iIk+FOF6d1THq9ug0QLLtSKn5B5O+WdKH4u3GkTLrzRKCm8Y8JE9Q04NRaAeMwsi0PniW9zCUVvgtN0tWj7zyJROjROLZi2WJcaw1sa64gDLDIFiwv3eg0w8By4xvcuwxWV4Zi1cyheeA8FM4AhBFT3S7TveYyeFeAk8XpdWnWavpo1QsIA4WsBSjlUr41wBf6G3aLC4UjQzMVcYrovZp6mul9BlYpt/w=",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),D,$,ll,tl,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJx9U81u00AQfpVRLruWWrsJvym2Bcce4FJuTQ9rZ6Mu2Guzuw6tUksUCfXCAak9VQi1AiSQkDgi2ghehjTh1Fdg1k7cgkRlrbU78818O/vNjFqeVrH3IM/dYcFbqy1fx0rkBjQ3RR72pEjzTBkYgeIDKGGgshQIQsm9nuzJhBt0aAismxLi1CYh88KsG9VeONorK9Be+dfdWbi7t6B7G7p3oHsXul1EtnF1cN3AdRPXLRs6KGRsRCZhIGnDsNQkc2DUkwBiAJfeICBkd7eB2KODlKZQEljClaFk9vXb7MfB5NXHi/GeZQGwV9zYTpdkkW7iDZtkrs4TgRFAHDdlOX1UpBFXTQhT6gq6cw0aka7GV6WULUVOEFb3hsW9HjKz5bJIU7a8nTqwfGmIrMFiy+qPD+8OWVJwpLUpn2RCVnw9Wfak79VKooZ4MDzNE2Y4ngD8PJx8ODr/clIXPj38NP18en48/n10OBm/8D2rO6KqUmC4nGZ9ngSkeQcCXuhH6lpQ5y9QVBiDut2PExE/Dch/9CMQTl9+n+yfzX6+mZ289r06rE6x1Q5/nb2fHu/VzunZwfm7txfjo5HtTA1l6XsIsWVfKdV+ngeP1+tC7X//tDLFmdTYuknVgc8KoTglirN+IiRHwWLcG74mDVcDFnM6qnVdhVxlMdfa1aYvJOqAU4DZhkyBQKzNlmys76RRlrhM78h4Da3MZGqTzqFz4jmVVc7CgDoQhEDZcyZwPjDIlXzbUMepFa6GzRJloo+oKqQZB4zFDkIvzLPbeawzLXgW7KVT7VrlHzEAbb8=",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),el,nl,sl,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJxNUsFq3DAQ/ZVhL7IPtek1tU17zHl7q3vQamUqKsuuJG8bjKEplFx6KCSnpZSEttBCoceS7JL8THa9OeUXMrJ2wyIQ0sx7855m1I5io1n8oq6jWcNHB6PEMC1qC4bbps5yJcq60hZa0LyADgpdlUAQSp7lKleSW0wYSF06ICT0IaHqxo6t3o8XjWJWVAoKFezyIbS5AhAFPIbSFNHIso1WQCXXNiCbf/8316erz7/ul8euVK66XCWxd4oe8WJ5WUtqOd4Akjpb/Zyv/154Vn/2u/9ztT5f3s3PVsuPSezehahBEmZPymrKZUp2DgjEWTLRHjNprEXPz5kU7G1K9r0TyPpPl6uTxebm6+biSxJ7rOe9eZrdLn7058c+2S9O19+/3S/nrWukga5LYoS4V+w5dyuO4eXY+3b7ydUQYpUy2Gk5NPRdIzQPiOZ0KoXiJIwYni0/VJbrgjIetH4CB1DrinFjImOnQkEX4tCw2oxqEIh11eSr8VE5qWREzZFihxilttKvgy10K7yVQsIAgyCENIOAvqcCp42kSPEPNgjDaEZlw4e/4YQqMUXUQHmcP3Jx6piFbXX3fXylnc5OvQuH06h7AF06BeE=",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),al,il,dl,pl,rl,hl,ol,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJyFU81u00AQfpWRJWRbVe2WY7EjEKeeww1zcDZrarHZNbvrQIksUQTqhQNSyyVCqBUgAQLBjdJE8DJJHE59BWa9idtbLWvlnfnm++bPIydUkoR3iiIYltTZcSJFZF5oUFSXRSfh+aAQUsMIJM2ggkyKASQOYhPnVsITzqhGl4LYADzX9a0p50Wpu1qu7SkTTPSEcWclJzoXHDLurWE+jFAqg9YQx0iFobqUHFJGpfbc5Y9fyz9H81efLqYHhgggDFuh2dl3V7j1+OXs7Ovi7U/jNXk8o1LcFSXXmMhWkzBAJiR4xklAZC1BkwLgY9IgEMdYpkgc/5JiYwMJACpzGNAl9w24aQK2Wg7sSDBMWUnjlj9glD/Uew0DUKbo9VjYhO2VIr5Y7L2ubYA5D88bExFc4QRY0+jHZS6plziSpn2Wc5yRHxC8aLrLNZVZSqg3sio7UEhBqFKB0v2cQ+Vjccg3TCXkiDV87H53f9ATLEjVPie7aE21kA+8FXQlvdLCgAYGng9xB7z0SZrjHmBQwOlT7fm+rbIZghESeR9RTUi7EhiLXUEvrNjNYlmmtc5avfKbr4RHoV1ZXFa8aDooGBaMN4Co6Mw/jhffTm3b6uPP9Zfzxcn03/h4Pn0ehWbBEdU0BIabA9GnLE6c9RgSB0KL6JVaY3q3CcvJo9i9urkudOoXv+eHk+XfN8vT11FosTZub7szm3yoTw6ss54cLd6/u5iOR+Z/UlBVUYgQU8OVvBPuVP8BuTpYcQ==",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),cl,ul,bl,gl,yl,t(" 瑕疵度计算规则如上图注解所示。 "),xl,wl,ml,fl,kl,Al,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJxtVM9rE0EU/lceuewuaXfba7sJ9uChBxGMnpIcppvZZnAyu87MJi0hYAXpxYPSqlBEWvyBgtSTiG3Qf8Z046n/gm/2V4IVQjLz3ve+782XmTeueUoG3lYcu8OE1jZqvgokizUoqpO42RFsEEdSwxgkDWECoYwGYCHU2uyIjuBUY0JBw6Rty3LyEBNxoltalvE1IKq3k7CoR4ckScLdvkGGiQg0iwSEwi4rHBh3BAALoQo1GsiLPDqRAginUtvW/Ov3+c+j2dMP19MDTJqSZV3TULl2VcwZloCRBNOtOyQ8oQjZpfoeVQnXlZZqr3VXFpv1LtaYqqrVRUnIyWhFVR0DBJFQmW/ILOgIWlTbnRqhLEq2bm/ffdCpOZlnCyzr7ZlO212Mm2gYSbCzc2B0bRN/fEAFl1Oxq/u4r9crtdwjVHP7RNmIarOu42SUbpyovs2MmsFNSlHDTIRRXCtSJiKMV6aqUFlG83+w5g81+zwy6jNOwZbYpVjqy/MgffEyffVtdvFxfn6Wnr8uM4aix8KwUGzLLqzmK25WyLQKfGFSfsSsoAnG7iURJKvXi87wiEC5ogu4fxMub8KXsrktd4juuwOyZ+N25T8t1mG9NPUGZeV1likuq1AZAKP4QV/ut/Jba74PL7JQfhOkcVrSRwmT1LYkJT3OBLUcN8C1pttCUxmSgNrj/F5vQCyjgCrlKt1jAiamL2QbEgkMsYaNt1v7g52Iu0Tti2Abo0RHsmsX0EK4kMKCDAa2A40m2GREGN5DLHIF3dO24+SvJvtzjFDEeojKSqrHgbXoKWarx2BoM6ZSp1SfONnK9/Jxg4MGN5oOYo7HxR2AHzdn70+uvpzllqXHn9LPF1en0z8nx7PpY98zwwlRmR0wXB3gbOENq3y7Fnh5fifRGlu7FXAWPGxYy6PGgmb65Mfs8HL+6/n87Jnv5di8rr/e/H35Lj09yJPp5dHV2zfX05OxmYQKJhPfQ4g5wVLXHVGb/AXwWtd1",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),vl,El,Bl,Ul,ql,l("blockquote",null,[Vl,Ql,e(a,{color:"red"},{default:i(()=>[t("1 2"),Jl]),_:1}),e(a,{color:"red"},{default:i(()=>[t("1 3"),Cl]),_:1}),e(a,{color:"red"},{default:i(()=>[t("2 4")]),_:1})]),e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJyVVM1u20YQfpWFLyThhNRPe0kkoT3m0F7cmywUNLWEiVJLdrl0HQgC7MCNldg1XMRJAycp5LZBUqSJdGgbW1Kjl9GS7Emv0FkuyciA0aYSSCxnv5n59puZ7a4YAbWMT31f3wrxyo2VWmBRx2cowCz0G+vE6fgeZaiLKLZRD9nU6yAFoMrNdbJOXMxgI0B1sa0qiiZNJDd8pGjIMFDUP+bfP452JtHDkUQ4xA/ZGqM5sFwqoQo8VXg+LpWW3eLTveT3n/jwkO9Ms/BeG98itlcuvFFFeiT378R3Luazs2h3eBlbeY+t/he2mmMrKDvAZawdEos5HkE2Ucm1/CjXClrFqlKsqhrqgpg2UnN4vQ5yQRoWUoJMF1OmKsnwbfLuAf/2+WK6K7REIjefjONXBxmD86NCC9Alejzgo73F9JCP7paio5e8P4qe7vB738WvhmCd/zWTbotpP/OfHJX5dIe/OFhM70Gw+flBNNjnwws+Pkn+eBs9ey6S5lqIuuZ09cB3HaCIFE3vmL76edjZwDTlmEL1kASbjs3UUsG7/wzy8MNHcf/PePximXrBO3p0MX8348dH8eR1MnuSnB0mb87iNz/kLGzzyw6QaOq6nmZpXaVJWhWhxsNRPNnLXU0qmqtZFGXpAO/rc5WxumSEfCKe7VGkyrZt420IW7qZLWtIJdfLWva5upqWGcFPkBzd5a+PJcmiiUEG0CMzPjnn9wcSL07aBM7NNFCrWWq10GpdartsL7dSDXriBZOnb5luiOufmWwTyrKtglAiEtQAEDVDDjOMMXww3PFdk2H4QqjmN/gvp9FvZ7Lf4pOX8a/jaDD9+/QE+qNmiNEHVFp9tHW9AzTcukIUZDRqG/TKzbxT/g1TVONDQJUPAVUvgTZCxmAuP7Fcx/qqrvyf+VRQA0rC9yfJ7Bj6sGbIWDLuZrkxn/wcD3blZjx5EP34dDE97Yp7MUC9Xs0AiFB8SWXxhzb4Yk1qLN7749RkeSSAi9NN75mvQ4diVaHYbLsOwTBfFqwZ0GKY2qaF1a6cwhvIp56Fg0APWNshqKfBHQzRtkyKHMCKaG5z7XZnw3N1M7hNrFtgNZlHW2oGzRJnqcAhhSFVQ/UGUs1vTAd6HJx0greZqmmyvdKrXiTynDagUpfiDgRfaHnYRVl0cWvISHmePHtPS1crvX8AdlmsLA==",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),Sl,Ll,Nl,Fl,Xl,Wl,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJxNU81u00AQfpVRLrZlajcCAWptix57DrckB9dZixXrtdldh1aRJYqEeuGA1J4ihFoBEkhIHBFNBC9D4nDqK3TWa6e1Le/OzDfz7fzsrOdLkfgHReFNS9Lb6wUyEbRQIIkqi2jEaVbkQsEMBEmhglTkGVgItfZHfMQZUWiQEGqzbVmOUfEy61RPOh3lRakGSnSGp/AIHsND6ON/C5rGrLP3d7UyLXmiaM4h5XYXwYEZniuFrSIMkRm9VCk4xIwIZVubn782f85X777eLE91IAAdPxaav/PzZMEoYuEOoOl3O0Fj7wQiDxrv4Vir0lyAbfKakGMN3G+3gU5/p9+KrtscF/ChqY38QzZ29SLGEeK2RiRx3QfCdY1YmaWVUcIv8E1vsCsoKJIVLFYEJYCgiFZf5usfVybn+uJb/f16fbn8P79YLd8Evu4koprEYbqT5RPCQqurgwW+sR+VSmGtnyWMJi9D637NLYjqt79XZ4vN3w+bq/eBb7DG70U/+rf4XF+eGmO9OF9/+niznM/02EioqsBHiM7g3qn16/vwfGDOrP9n140qybnEgptReFVSQWxLkHjCKCeW4yW4V+SQKyLSOCH2zDR0DwqRJ0RKT6oJ5VA5OKIYbRoLoIjV0dhwcJId5cyL5QlPDlEbq1yM7RbaErdU6NDAwHYgjMCOX8cU+41OHifHynYcD+e1JM1N0EQ5nSCqcdnOLfpih9EKbXR9WUykjqdjr5xm16tuAXrxSvY=",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="})])}const Tl=p(c,[["render",Zl],["__file","hw-cd.html.vue"]]),Rl=JSON.parse(`{"path":"/docs/program/algorithm/hw-cd.html","title":"华为机考题CD卷","lang":"zh-CN","frontmatter":{"title":"华为机考题CD卷","description":"(出现频率:红色(5 次) > 蓝色(4 次) > 绿色(3 次) > 黄色(2 次) ) 停车场车辆统计 题目描述 特定大小的停车场，数组cars[]表示，其中1表示有车，0表示没车。 车辆大小不一，小车占一个车位（长度1），货车占两个车位（长度2），卡车占三个车位（长度3）。 统计停车场最少可以停多少辆车，返回具体的数目。 输入描述 整型字符串数组...","head":[["meta",{"property":"og:url","content":"https://bzt2017.github.io/docs/program/algorithm/hw-cd.html"}],["meta",{"property":"og:site_name","content":"Tiger"}],["meta",{"property":"og:title","content":"华为机考题CD卷"}],["meta",{"property":"og:description","content":"(出现频率:红色(5 次) > 蓝色(4 次) > 绿色(3 次) > 黄色(2 次) ) 停车场车辆统计 题目描述 特定大小的停车场，数组cars[]表示，其中1表示有车，0表示没车。 车辆大小不一，小车占一个车位（长度1），货车占两个车位（长度2），卡车占三个车位（长度3）。 统计停车场最少可以停多少辆车，返回具体的数目。 输入描述 整型字符串数组..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.staticaly.com/gh/BZT2017/oss-img@main/eb378b5515874c268c7f1fe75ad03674.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-17T13:09:52.000Z"}],["meta",{"property":"article:author","content":"Tiger"}],["meta",{"property":"article:modified_time","content":"2024-06-17T13:09:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"华为机考题CD卷\\",\\"image\\":[\\"https://cdn.staticaly.com/gh/BZT2017/oss-img@main/eb378b5515874c268c7f1fe75ad03674.png\\",\\"https://cdn.staticaly.com/gh/BZT2017/oss-img@main/75a9cd9bc529429498db58f1cc4ef433.png\\"],\\"dateModified\\":\\"2024-06-17T13:09:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tiger\\",\\"url\\":\\"https://bzt2017.github.io/myBlog/\\"}]}"]]},"headers":[{"level":3,"title":"停车场车辆统计","slug":"停车场车辆统计","link":"#停车场车辆统计","children":[{"level":4,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":4,"title":"输入描述","slug":"输入描述","link":"#输入描述","children":[]},{"level":4,"title":"输出描述","slug":"输出描述","link":"#输出描述","children":[]},{"level":4,"title":"用例","slug":"用例","link":"#用例","children":[]},{"level":4,"title":"题目解析","slug":"题目解析","link":"#题目解析","children":[]}]},{"level":3,"title":"英文输入法","slug":"英文输入法","link":"#英文输入法","children":[{"level":4,"title":"题目描述","slug":"题目描述-1","link":"#题目描述-1","children":[]},{"level":4,"title":"输入描述","slug":"输入描述-1","link":"#输入描述-1","children":[]},{"level":4,"title":"输出描述","slug":"输出描述-1","link":"#输出描述-1","children":[]},{"level":4,"title":"用例","slug":"用例-1","link":"#用例-1","children":[]},{"level":4,"title":"题目解析","slug":"题目解析-1","link":"#题目解析-1","children":[]}]},{"level":3,"title":"API集群负载统计","slug":"api集群负载统计","link":"#api集群负载统计","children":[{"level":4,"title":"题目描述","slug":"题目描述-2","link":"#题目描述-2","children":[]},{"level":4,"title":"输入描述","slug":"输入描述-2","link":"#输入描述-2","children":[]},{"level":4,"title":"输出描述","slug":"输出描述-2","link":"#输出描述-2","children":[]},{"level":4,"title":"用例","slug":"用例-2","link":"#用例-2","children":[]}]},{"level":3,"title":"提取字符串中的最长合法简单数学表达式","slug":"提取字符串中的最长合法简单数学表达式","link":"#提取字符串中的最长合法简单数学表达式","children":[{"level":4,"title":"题目描述","slug":"题目描述-3","link":"#题目描述-3","children":[]},{"level":4,"title":"输入描述","slug":"输入描述-3","link":"#输入描述-3","children":[]},{"level":4,"title":"输出描述","slug":"输出描述-3","link":"#输出描述-3","children":[]},{"level":4,"title":"用例","slug":"用例-3","link":"#用例-3","children":[]},{"level":4,"title":"题目解析","slug":"题目解析-2","link":"#题目解析-2","children":[]}]},{"level":3,"title":"开源项目热度榜单","slug":"开源项目热度榜单","link":"#开源项目热度榜单","children":[{"level":4,"title":"题目描述","slug":"题目描述-4","link":"#题目描述-4","children":[]},{"level":4,"title":"输入描述","slug":"输入描述-4","link":"#输入描述-4","children":[]},{"level":4,"title":"输出描述","slug":"输出描述-4","link":"#输出描述-4","children":[]},{"level":4,"title":"用例","slug":"用例-4","link":"#用例-4","children":[]},{"level":4,"title":"题目解析","slug":"题目解析-3","link":"#题目解析-3","children":[]}]},{"level":3,"title":"虚拟理财游戏","slug":"虚拟理财游戏","link":"#虚拟理财游戏","children":[{"level":4,"title":"题目描述","slug":"题目描述-5","link":"#题目描述-5","children":[]},{"level":4,"title":"输入描述","slug":"输入描述-5","link":"#输入描述-5","children":[]},{"level":4,"title":"输出描述","slug":"输出描述-5","link":"#输出描述-5","children":[]},{"level":4,"title":"用例","slug":"用例-5","link":"#用例-5","children":[]},{"level":4,"title":"题目解析","slug":"题目解析-4","link":"#题目解析-4","children":[]}]},{"level":3,"title":"掌握的单词个数","slug":"掌握的单词个数","link":"#掌握的单词个数","children":[{"level":4,"title":"题目描述","slug":"题目描述-6","link":"#题目描述-6","children":[]},{"level":4,"title":"输入描述","slug":"输入描述-6","link":"#输入描述-6","children":[]},{"level":4,"title":"输出描述","slug":"输出描述-6","link":"#输出描述-6","children":[]},{"level":4,"title":"用例","slug":"用例-6","link":"#用例-6","children":[]},{"level":4,"title":"题目解析","slug":"题目解析-5","link":"#题目解析-5","children":[]}]},{"level":3,"title":"寻找身高相近的小朋友","slug":"寻找身高相近的小朋友","link":"#寻找身高相近的小朋友","children":[{"level":4,"title":"题目描述","slug":"题目描述-7","link":"#题目描述-7","children":[]},{"level":4,"title":"输入描述","slug":"输入描述-7","link":"#输入描述-7","children":[]},{"level":4,"title":"输出描述","slug":"输出描述-7","link":"#输出描述-7","children":[]},{"level":4,"title":"用例","slug":"用例-7","link":"#用例-7","children":[]},{"level":4,"title":"题目解析","slug":"题目解析-6","link":"#题目解析-6","children":[]}]},{"level":3,"title":"精准核酸检测","slug":"精准核酸检测","link":"#精准核酸检测","children":[{"level":4,"title":"题目描述","slug":"题目描述-8","link":"#题目描述-8","children":[]},{"level":4,"title":"输入描述","slug":"输入描述-8","link":"#输入描述-8","children":[]},{"level":4,"title":"输出描述","slug":"输出描述-8","link":"#输出描述-8","children":[]},{"level":4,"title":"用例","slug":"用例-8","link":"#用例-8","children":[]},{"level":4,"title":"题目解析","slug":"题目解析-7","link":"#题目解析-7","children":[]}]},{"level":3,"title":"最长子字符串的长度（一）","slug":"最长子字符串的长度-一","link":"#最长子字符串的长度-一","children":[{"level":4,"title":"题目描述","slug":"题目描述-9","link":"#题目描述-9","children":[]},{"level":4,"title":"输入描述","slug":"输入描述-9","link":"#输入描述-9","children":[]},{"level":4,"title":"输出描述","slug":"输出描述-9","link":"#输出描述-9","children":[]},{"level":4,"title":"备注","slug":"备注","link":"#备注","children":[]},{"level":4,"title":"用例","slug":"用例-9","link":"#用例-9","children":[]},{"level":4,"title":"题目解析","slug":"题目解析-8","link":"#题目解析-8","children":[]}]},{"level":3,"title":"最长的指定瑕疵度的元音子串","slug":"最长的指定瑕疵度的元音子串","link":"#最长的指定瑕疵度的元音子串","children":[{"level":4,"title":"题目描述","slug":"题目描述-10","link":"#题目描述-10","children":[]},{"level":4,"title":"输入描述","slug":"输入描述-10","link":"#输入描述-10","children":[]},{"level":4,"title":"输出描述","slug":"输出描述-10","link":"#输出描述-10","children":[]},{"level":4,"title":"用例","slug":"用例-10","link":"#用例-10","children":[]},{"level":4,"title":"题目解析","slug":"题目解析-9","link":"#题目解析-9","children":[]}]},{"level":3,"title":"最富裕的小家庭","slug":"最富裕的小家庭","link":"#最富裕的小家庭","children":[{"level":4,"title":"题目描述","slug":"题目描述-11","link":"#题目描述-11","children":[]},{"level":4,"title":"输入描述","slug":"输入描述-11","link":"#输入描述-11","children":[]},{"level":4,"title":"输出描述","slug":"输出描述-11","link":"#输出描述-11","children":[]},{"level":4,"title":"用例","slug":"用例-11","link":"#用例-11","children":[]},{"level":4,"title":"题目解析","slug":"题目解析-10","link":"#题目解析-10","children":[]}]},{"level":3,"title":"最多购买宝石数目","slug":"最多购买宝石数目","link":"#最多购买宝石数目","children":[{"level":4,"title":"题目描述","slug":"题目描述-12","link":"#题目描述-12","children":[]},{"level":4,"title":"输入描述","slug":"输入描述-12","link":"#输入描述-12","children":[]},{"level":4,"title":"输出描述","slug":"输出描述-12","link":"#输出描述-12","children":[]},{"level":4,"title":"用例","slug":"用例-12","link":"#用例-12","children":[]},{"level":4,"title":"题目解析","slug":"题目解析-11","link":"#题目解析-11","children":[]}]}],"git":{"createdTime":1717585950000,"updatedTime":1718629792000,"contributors":[{"name":"tiger-github","email":"634513456@qq.com","commits":2}]},"readingTime":{"minutes":36.78,"words":11033},"filePathRelative":"docs/program/algorithm/hw-cd.md","localizedDate":"2024年6月5日","excerpt":"<p>(出现频率:<span style=\\"background:red;\\">红色(5 次)</span> &gt; <span style=\\"background:cyan;\\">蓝色(4 次)</span> &gt; <span style=\\"background:lime;\\">绿色(3 次)</span> &gt; <span style=\\"background:yellow;\\">黄色(2 次)</span> )</p>\\n<!-- ### <font color='red'>停车场车辆统计</font> -->\\n<h3><span style=\\"background:red;\\">停车场车辆统计</span></h3>","autoDesc":true}`);export{Tl as comp,Rl as data};
