import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,c as p,a as e,d as s,e as l,w as r,b as a,o as i}from"./app-C6gSQRA4.js";const c={},d=e("h2",{id:"setup-与-script-setup",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#setup-与-script-setup"},[e("span",null,"setup()与 <script setup>")])],-1),u=e("p",null,"<script setup>",-1),m=e("li",null,[e("p",null,"setup()"),e("p",null,"通常用于在选项式api代码中集成组合式api代码中使用")],-1),v=a(`<h2 id="vue3-的生命周期" tabindex="-1"><a class="header-anchor" href="#vue3-的生命周期"><span>vue3 的生命周期</span></a></h2><ul><li>onBeforeMount(): 在组件被挂载之前被调用。</li><li>onMounted(): 在组件挂载完成后执行。</li><li>onBeforeUpdate(): 在组件即将因为响应式状态变更而更新其 DOM 树之前调用。</li><li>onUpdated(): 在组件因为响应式状态变更而更新其 DOM 树之后调用。<mark>钩子会在组件的任意 DOM 更新后被调用</mark></li><li>onBeforeUnmount(): 在组件实例被卸载之前调用。</li><li>onUnmounted(): 在组件实例被卸载之后调用。</li></ul><h2 id="自定义指令" tabindex="-1"><a class="header-anchor" href="#自定义指令"><span>自定义指令</span></a></h2><p>自定义指令可以直接在 &lt;script setup&gt;中声明，命名规范：<mark>vNameOfDirective</mark></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>
<span class="token comment">// </span>
<span class="token keyword">const</span> vMyDirective <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">beforeMount</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在元素上做些操作</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>h1 v<span class="token operator">-</span>my<span class="token operator">-</span>directive<span class="token operator">&gt;</span>This is a Heading<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件" tabindex="-1"><a class="header-anchor" href="#组件"><span>组件</span></a></h2><h3 id="组件引入" tabindex="-1"><a class="header-anchor" href="#组件引入"><span>组件引入</span></a></h3><p>在 &lt;script setup&gt; 中不需要声明，直接引入就可以使用</p><p><mark>强烈建议使用 PascalCase 格式</mark></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>
<span class="token keyword">import</span> MyComponent <span class="token keyword">from</span> <span class="token string">&#39;./MyComponent.vue&#39;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>MyComponent <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命名空间组件" tabindex="-1"><a class="header-anchor" href="#命名空间组件"><span>命名空间组件</span></a></h3><p>可以使用带 . 的组件标签，例如 &lt;Foo.Bar&gt; 来引用嵌套在对象属性中的组件。</p><p>这在需要从单个文件中导入多个组件的时候非常有用：</p>`,13),k=e("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[e("pre",{js:"",class:"language-javascript"},[e("code",null,[e("span",{class:"token operator"},"<"),s("script setup"),e("span",{class:"token operator"},">"),s(`
`),e("span",{class:"token keyword"},"import"),s(),e("span",{class:"token operator"},"*"),s(),e("span",{class:"token keyword"},"as"),s(" Form "),e("span",{class:"token keyword"},"from"),s(),e("span",{class:"token string"},"'./form-components'"),s(`
`),e("span",{class:"token operator"},"<"),e("span",{class:"token operator"},"/"),s("script"),e("span",{class:"token operator"},">"),s(`

`),e("span",{class:"token operator"},"<"),s("template"),e("span",{class:"token operator"},">"),s(`
  `),e("span",{class:"token operator"},"<"),s("Form"),e("span",{class:"token punctuation"},"."),s("Input"),e("span",{class:"token operator"},">"),s(`
    `),e("span",{class:"token operator"},"<"),s("Form"),e("span",{class:"token punctuation"},"."),s("Label"),e("span",{class:"token operator"},">"),s("label"),e("span",{class:"token operator"},"<"),e("span",{class:"token operator"},"/"),s("Form"),e("span",{class:"token punctuation"},"."),s("Label"),e("span",{class:"token operator"},">"),s(`
  `),e("span",{class:"token operator"},"<"),e("span",{class:"token operator"},"/"),s("Form"),e("span",{class:"token punctuation"},"."),s("Input"),e("span",{class:"token operator"},">"),s(`
`),e("span",{class:"token operator"},"<"),e("span",{class:"token operator"},"/"),s("template"),e("span",{class:"token operator"},">"),s(`
`)])]),e("div",{class:"highlight-lines"},[e("br"),e("br"),e("br"),e("br"),e("br"),e("div",{class:"highlight-line"}," "),e("div",{class:"highlight-line"}," "),e("div",{class:"highlight-line"}," "),e("br")]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),h=a('<h2 id="虚拟-dom-与-diff-算法" tabindex="-1"><a class="header-anchor" href="#虚拟-dom-与-diff-算法"><span>虚拟 DOM 与 diff 算法</span></a></h2><p>虚拟 dom 就是通过 js 生成 ATS（抽象语法树）节点树，在很多需要转换的场景都会使用，例如 ts 转 js 等</p><p>还有一点是操作虚拟 dom 能提高性能</p><ol><li>增删改时，重绘与重排减少</li><li>使用 ref 查询时，减少了查询范围，提高查询性能</li></ol><p>diff 算法分两种情况</p><blockquote><p><strong>1. 未定义 key 时：新虚拟 dom 与旧虚拟 dom 从头部开始比较，</strong></p></blockquote><blockquote><p><strong>2. 定义了 key：</strong></p></blockquote>',7);function g(b,f){const n=o("RouteLink");return i(),p("div",null,[d,e("ul",null,[e("li",null,[u,e("p",null,[s("推荐在"),l(n,{to:"/docs/interview/vue/vue.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6"},{default:r(()=>[s("单文件组件")]),_:1}),s("中使用，即常用的.vue文件")])]),m]),v,k,h])}const y=t(c,[["render",g],["__file","vue3.html.vue"]]),x=JSON.parse('{"path":"/docs/interview/vue/vue3.html","title":"vue3","lang":"zh-CN","frontmatter":{"title":"vue3","date":"2023-05-19T00:00:00.000Z","description":"setup()与 <script setup> <script setup> 推荐在中使用，即常用的.vue文件 setup() 通常用于在选项式api代码中集成组合式api代码中使用 vue3 的生命周期 onBeforeMount(): 在组件被挂载之前被调用。 onMounted(): 在组件挂载完成后执行。 onBeforeUpdate(): ...","head":[["meta",{"property":"og:url","content":"https://bzt2017.github.io/docs/interview/vue/vue3.html"}],["meta",{"property":"og:site_name","content":"Tiger"}],["meta",{"property":"og:title","content":"vue3"}],["meta",{"property":"og:description","content":"setup()与 <script setup> <script setup> 推荐在中使用，即常用的.vue文件 setup() 通常用于在选项式api代码中集成组合式api代码中使用 vue3 的生命周期 onBeforeMount(): 在组件被挂载之前被调用。 onMounted(): 在组件挂载完成后执行。 onBeforeUpdate(): ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-25T10:55:16.000Z"}],["meta",{"property":"article:author","content":"Tiger"}],["meta",{"property":"article:published_time","content":"2023-05-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-25T10:55:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue3\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-25T10:55:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tiger\\",\\"url\\":\\"https://bzt2017.github.io/myBlog/\\"}]}"]]},"headers":[{"level":2,"title":"setup()与 <script setup>","slug":"setup-与-script-setup","link":"#setup-与-script-setup","children":[]},{"level":2,"title":"vue3 的生命周期","slug":"vue3-的生命周期","link":"#vue3-的生命周期","children":[]},{"level":2,"title":"自定义指令","slug":"自定义指令","link":"#自定义指令","children":[]},{"level":2,"title":"组件","slug":"组件","link":"#组件","children":[{"level":3,"title":"组件引入","slug":"组件引入","link":"#组件引入","children":[]},{"level":3,"title":"命名空间组件","slug":"命名空间组件","link":"#命名空间组件","children":[]}]},{"level":2,"title":"虚拟 DOM 与 diff 算法","slug":"虚拟-dom-与-diff-算法","link":"#虚拟-dom-与-diff-算法","children":[]}],"git":{"createdTime":1719312916000,"updatedTime":1719312916000,"contributors":[{"name":"tiger-github","email":"634513456@qq.com","commits":1}]},"readingTime":{"minutes":1.63,"words":490},"filePathRelative":"docs/interview/vue/vue3.md","localizedDate":"2023年5月19日","excerpt":"<h2>setup()与 &lt;script setup&gt;</h2>\\n<ul>\\n<li>\\n<p>&lt;script setup&gt;</p>\\n<p>推荐在<a href=\\"/docs/interview/vue/vue.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6\\" target=\\"_blank\\">单文件组件</a>中使用，即常用的.vue文件</p>\\n</li>\\n<li>\\n<p>setup()</p>\\n<p>通常用于在选项式api代码中集成组合式api代码中使用</p>\\n</li>\\n</ul>","autoDesc":true}');export{y as comp,x as data};
