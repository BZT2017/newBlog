import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o,b as r}from"./app-BtVrOwiQ.js";const n={},i=r('<h2 id="eventlopp" tabindex="-1"><a class="header-anchor" href="#eventlopp"><span>Eventlopp</span></a></h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>Event loop 不是 ECMAScript 标准，而是 HTML 标准，各浏览器会有不同程度的执行。</p></div><p>Javascript 有一个 <strong>main thread 主线程</strong> 和 <strong>call-stack 调用栈(执行栈)</strong> ，所有的任务都会被放到调用栈等待主线程执行。</p><p>在 JavaScript 中，任务被分为两种，一种 <strong>宏任务（MacroTask）</strong> ，一种叫 <strong>微任务（MicroTask）</strong> ，均是队列结构。</p><ul><li><p>MacroTask（宏任务）</p><ul><li>script 全部代码、setTimeout、setInterval、setImmediate（浏览器暂时不支持，只有 IE10 支持，具体可见 MDN）、I/O、UI Rendering。</li></ul></li><li><p>MicroTask（微任务）</p><ul><li><p>Promise、Process.nextTick（Node 独有）、MutationObserver、Object.observe(废弃)</p></li><li><p>微任务的优先级比宏任务高</p></li></ul></li></ul><p>执行过程如下图： <img src="https://cdn.jsdelivr.net/gh/BZT2017/oss-img/eventloop.gif" alt="eventlopp" loading="lazy"></p><h2 id="为什么-promise-可以链式调用" tabindex="-1"><a class="header-anchor" href="#为什么-promise-可以链式调用"><span>为什么 promise 可以链式调用</span></a></h2><p>Promise 返回的时间与状态是不确定的，返回时有三种状态 <strong>pending（等待），resolved（成功），rejected（失败）</strong></p><p>Promise 可以链式.then 是因为，.then 回调返回的也是一个 Promise，所以才可以一直.then</p><h2 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链"><span>原型链</span></a></h2><p>原型（prototype）：每个函数都有 prototype 属性，该属性指向原型对象；使用原型对象的好处是所有对象实例共享它所包含的属性和方法。</p><p>原型链主要解决了继承的问题，<strong>每个对象都拥有一个原型对象，通过__proto__指针指向其原型对象，并从中继承方法和属性</strong>，同时原型对象也可能拥有原型，这样一层一层，最终指向 null。</p>',12),a=[i];function p(s,l){return o(),e("div",null,a)}const m=t(n,[["render",p],["__file","中级.html.vue"]]),h=JSON.parse('{"path":"/docs/interview/base/%E4%B8%AD%E7%BA%A7.html","title":"中级","lang":"zh-CN","frontmatter":{"title":"中级","date":"2022-06-20T00:00:00.000Z","description":"Eventlopp 注意 Event loop 不是 ECMAScript 标准，而是 HTML 标准，各浏览器会有不同程度的执行。 Javascript 有一个 main thread 主线程 和 call-stack 调用栈(执行栈) ，所有的任务都会被放到调用栈等待主线程执行。 在 JavaScript 中，任务被分为两种，一种 宏任务（Macr...","head":[["meta",{"property":"og:url","content":"https://bzt2017.github.io/newBlog/docs/interview/base/%E4%B8%AD%E7%BA%A7.html"}],["meta",{"property":"og:site_name","content":"Tiger"}],["meta",{"property":"og:title","content":"中级"}],["meta",{"property":"og:description","content":"Eventlopp 注意 Event loop 不是 ECMAScript 标准，而是 HTML 标准，各浏览器会有不同程度的执行。 Javascript 有一个 main thread 主线程 和 call-stack 调用栈(执行栈) ，所有的任务都会被放到调用栈等待主线程执行。 在 JavaScript 中，任务被分为两种，一种 宏任务（Macr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/BZT2017/oss-img/eventloop.gif"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-17T09:53:22.000Z"}],["meta",{"property":"article:author","content":"Tiger"}],["meta",{"property":"article:published_time","content":"2022-06-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-17T09:53:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"中级\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/BZT2017/oss-img/eventloop.gif\\"],\\"datePublished\\":\\"2022-06-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-17T09:53:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tiger\\",\\"url\\":\\"https://bzt2017.github.io/myBlog/\\"}]}"]]},"headers":[{"level":2,"title":"Eventlopp","slug":"eventlopp","link":"#eventlopp","children":[]},{"level":2,"title":"为什么 promise 可以链式调用","slug":"为什么-promise-可以链式调用","link":"#为什么-promise-可以链式调用","children":[]},{"level":2,"title":"原型链","slug":"原型链","link":"#原型链","children":[]}],"git":{"createdTime":1715939602000,"updatedTime":1715939602000,"contributors":[{"name":"tiger-github","email":"634513456@qq.com","commits":1}]},"readingTime":{"minutes":1.22,"words":366},"filePathRelative":"docs/interview/base/中级.md","localizedDate":"2022年6月20日","excerpt":"<h2>Eventlopp</h2>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>Event loop 不是 ECMAScript 标准，而是 HTML 标准，各浏览器会有不同程度的执行。</p>\\n</div>\\n<p>Javascript 有一个 <strong>main thread 主线程</strong> 和 <strong>call-stack 调用栈(执行栈)</strong> ，所有的任务都会被放到调用栈等待主线程执行。</p>\\n<p>在 JavaScript 中，任务被分为两种，一种 <strong>宏任务（MacroTask）</strong> ，一种叫 <strong>微任务（MicroTask）</strong> ，均是队列结构。</p>","autoDesc":true}');export{m as comp,h as data};
