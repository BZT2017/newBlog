import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,c as r,e as o,f as e,d as t,a as l,w as i,b as n,o as h}from"./app-BtVrOwiQ.js";const c={},u=l("p",null,[t("(出现频率:"),l("span",{style:{background:"red"}},"红色(5 次)"),t(" > "),l("span",{style:{background:"cyan"}},"蓝色(4 次)"),t(" > "),l("span",{style:{background:"lime"}},"绿色(3 次)"),t(" > "),l("span",{style:{background:"yellow"}},"黄色(2 次)"),t(" )")],-1),b=n('<h2 id="停车场车辆统计" tabindex="-1"><a class="header-anchor" href="#停车场车辆统计"><span><span style="background:red;">停车场车辆统计</span></span></a></h2><h3 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h3><p>特定大小的停车场，数组cars[]表示，其中1表示有车，0表示没车。</p><p>车辆大小不一，小车占一个车位（长度1），货车占两个车位（长度2），卡车占三个车位（长度3）。</p><p>统计停车场最少可以停多少辆车，返回具体的数目。</p><h3 id="输入描述" tabindex="-1"><a class="header-anchor" href="#输入描述"><span>输入描述</span></a></h3><p>整型字符串数组cars[]，其中1表示有车，0表示没车，数组长度小于1000。</p><h3 id="输出描述" tabindex="-1"><a class="header-anchor" href="#输出描述"><span>输出描述</span></a></h3><p>整型数字字符串，表示最少停车数目。</p><h3 id="用例" tabindex="-1"><a class="header-anchor" href="#用例"><span>用例</span></a></h3>',10),g=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",null,"输入"),l("td",null,"1,0,1")]),l("tr",null,[l("td",null,"输出"),l("td",null,"2")]),l("tr",null,[l("td",null,"说明"),l("td",null,[l("p",null,"1个小车占第1个车位"),t(),l("p",null,"第二个车位空"),t(),l("p",null,"1个小车占第3个车位"),t(),l("p",null,"最少有两辆车")])])])],-1),y=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"117px"}},"输入"),l("td",{style:{width:"381px"}},"1,1,0,0,1,1,1,0,1")]),l("tr",null,[l("td",{style:{width:"117px"}},"输出"),l("td",{style:{width:"381px"}},"3")]),l("tr",null,[l("td",{style:{width:"117px"}},"说明"),l("td",{style:{width:"381px"}},[l("p",null,"1个货车占第1、2个车位"),t(),l("p",null,"第3、4个车位空"),t(),l("p",null,"1个卡车占第5、6、7个车位"),t(),l("p",null,"第8个车位空"),t(),l("p",null,"1个小车占第9个车位"),t(),l("p",null,"最少3辆车")])])])],-1),x=l("h3",{id:"题目解析",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#题目解析"},[l("span",null,"题目解析")])],-1),m=l("p",null,"这道题的意思应该是：给定了车位占用情况，如 1,1,0,0,1,1,1,0,1，这种车位占用情况，可能停了6辆车，即每个1都停了一个小车，这是最多的情况，但是现在要求最少可能停几辆车。",-1),w=l("p",null,"解题思路也很简单，先把卡车，即111的停车情况先弄出来，再将火车，即11的停车情况弄出来，最后再弄小车1的情况。",-1),k=n('<h2 id="英文输入法" tabindex="-1"><a class="header-anchor" href="#英文输入法"><span><span style="background:red;">英文输入法</span></span></a></h2><h3 id="题目描述-1" tabindex="-1"><a class="header-anchor" href="#题目描述-1"><span>题目描述</span></a></h3><p>主管期望你来实现英文输入法单词联想功能。</p><p>需求如下：</p><ul><li>依据用户输入的单词前缀，从已输入的英文语句中联想出用户想输入的单词，按字典序输出联想到的单词序列</li><li>如果联想不到，请输出用户输入的单词前缀。</li></ul><p>注意：</p><ol><li>英文单词联想时，区分大小写</li><li>缩略形式如”don’t”，判定为两个单词，”don”和”t”</li><li>输出的单词序列，不能有重复单词，且只能是英文单词，不能有标点符号</li></ol><h3 id="输入描述-1" tabindex="-1"><a class="header-anchor" href="#输入描述-1"><span>输入描述</span></a></h3><p>输入为两行。</p><p>首行输入一段由英文单词word和标点符号组成的语句str；</p><p>接下来一行为一个英文单词前缀pre。</p><ul><li>0 &lt; word.length() &lt;= 20</li><li>0 &lt; str.length &lt;= 10000</li><li>0 &lt; pre &lt;= 20</li></ul><h3 id="输出描述-1" tabindex="-1"><a class="header-anchor" href="#输出描述-1"><span>输出描述</span></a></h3><p>输出符合要求的单词序列或单词前缀，存在多个时，单词之间以单个空格分割</p><h3 id="用例-1" tabindex="-1"><a class="header-anchor" href="#用例-1"><span>用例</span></a></h3>',15),f=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("I love you"),l("br"),t(" He")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"He")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},[l("p",null,"从用户已输入英文语句”I love you”中提炼出“I”、“love”、“you”三个单词，接下来用户输入“He”，"),t(),l("p",null,"从已输入信息中无法联想到任何符合要求的单词，因此输出用户输入的单词前缀。")])])])],-1),v=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[l("p",null,"The furthest distance in the world, Is not between life and death, But when I stand in front of you, Yet you don't know that I love you."),t(),l("p",null,"f")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"front furthest")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},"从用户已输入英文语句”The furthestdistance in the world, Is not between life and death, But when I stand in frontof you, Yet you dont know that I love you.”中提炼出的单词，符合“f”作为前缀的，有“furthest”和“front”，按字典序排序并在单词间添加空格后输出，结果为“front furthest”。")])])],-1),A=l("h3",{id:"题目解析-1",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#题目解析-1"},[l("span",null,"题目解析")])],-1),E=l("p",null,"简单的逻辑题，应该是主要考察数组去重，数组字典排序，过滤等知识",-1),B=n('<h2 id="api集群负载统计" tabindex="-1"><a class="header-anchor" href="#api集群负载统计"><span><span style="background:cyan;">API集群负载统计</span></span></a></h2><h3 id="题目描述-2" tabindex="-1"><a class="header-anchor" href="#题目描述-2"><span>题目描述</span></a></h3><p>某个产品的RESTful API集合部署在服务器集群的多个节点上，近期对客户端访问日志进行了采集，需要统计各个API的访问频次，根据热点信息在服务器节点之间做负载均衡，现在需要实现热点信息统计查询功能。</p><p>RESTful API是由多个层级构成，层级之间使用 / 连接，如 /A/B/C/D 这个地址，A属于第一级，B属于第二级，C属于第三级，D属于第四级。</p><p>现在负载均衡模块需要知道给定层级上某个名字出现的频次，未出现过用0表示，实现这个功能。</p><h3 id="输入描述-2" tabindex="-1"><a class="header-anchor" href="#输入描述-2"><span>输入描述</span></a></h3><p>第一行为N，表示访问历史日志的条数，0 ＜ N ≤ 100。</p><p>接下来N行，每一行为一个RESTful API的URL地址，约束地址中仅包含英文字母和连接符 / ，最大层级为10，每层级字符串最大长度为10。</p><p>最后一行为层级L和要查询的关键字。</p><h3 id="输出描述-2" tabindex="-1"><a class="header-anchor" href="#输出描述-2"><span>输出描述</span></a></h3><p>输出给定层级上，关键字出现的频次，使用完全匹配方式（大小写敏感）。</p><h3 id="用例-2" tabindex="-1"><a class="header-anchor" href="#用例-2"><span>用例</span></a></h3>',12),U=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("5"),l("br"),t(" /huawei/computing/no/one"),l("br"),t(" /huawei/computing"),l("br"),t(" /huawei"),l("br"),t(" /huawei/cloud/no/one"),l("br"),t(" /huawei/wireless/no/one"),l("br"),t(" 2 computing")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"2")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},"在第二层级上，computing出现了2次，因此输出2")])])],-1),Q=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("5"),l("br"),t(" /huawei/computing/no/one"),l("br"),t(" /huawei/computing"),l("br"),t(" /huawei"),l("br"),t(" /huawei/cloud/no/one"),l("br"),t(" /huawei/wireless/no/one"),l("br"),t(" 4 two")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"0")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},"存在第四层级的URL上，没有出现two，因此频次是0")])])],-1),J=n(`<p>本题的难度主要在于数据结构的定义，我们需要按照下图所示方式，对各层级的关键字进行统计</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                                                  <span class="token comment">// 层级0</span>
  <span class="token punctuation">{</span><span class="token string-property property">&quot;huawei&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                                <span class="token comment">// 层级1</span>
  <span class="token punctuation">{</span><span class="token string-property property">&quot;computing&quot;</span><span class="token operator">:</span> <span class="token number">2</span>，<span class="token string">&quot;cloud&quot;</span><span class="token operator">:</span> <span class="token number">1</span>，<span class="token string">&quot;wireless&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 层级2</span>
  <span class="token punctuation">{</span><span class="token string-property property">&quot;no&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                                        <span class="token comment">// 层级3</span>
  <span class="token punctuation">{</span><span class="token string-property property">&quot;one&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span>                                                       <span class="token comment">// 层级4</span>
 <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>外层是一个数组（数组索引就是层级号），数组元素是一个map结构（key是关键字，val是关键字在对应层级出现次数）</p><p>我们按照这种数据结构收集各条日志URL的组成关键字，就能快速的找到指定层级（通过数组索引）下的指定关键字（通过map结构的key）的出现频次（map结构的val）</p><p>更多细节信息，请看代码注释。</p>`,5),C=n('<h2 id="提取字符串中的最长合法简单数学表达式" tabindex="-1"><a class="header-anchor" href="#提取字符串中的最长合法简单数学表达式"><span><span style="background:cyan;">提取字符串中的最长合法简单数学表达式</span></span></a></h2><h3 id="题目描述-3" tabindex="-1"><a class="header-anchor" href="#题目描述-3"><span>题目描述</span></a></h3><p>提取字符串中的最长合法简单数学表达式，字符串长度最长的，并计算表达式的值。如果没有，则返回 0 。</p><p>简单数学表达式只能包含以下内容：</p><ul><li>0-9数字，符号+-*</li></ul><p>说明：</p><ul><li>所有数字，计算结果都不超过long</li><li>如果有多个长度一样的，请返回第一个表达式的结果</li><li>数学表达式，必须是最长的，合法的</li><li>操作符不能连续出现，如 +--+1 是不合法的</li></ul><h3 id="输入描述-3" tabindex="-1"><a class="header-anchor" href="#输入描述-3"><span>输入描述</span></a></h3><p>字符串</p><h3 id="输出描述-3" tabindex="-1"><a class="header-anchor" href="#输出描述-3"><span>输出描述</span></a></h3><p>表达式值</p><h3 id="用例-3" tabindex="-1"><a class="header-anchor" href="#用例-3"><span>用例</span></a></h3>',12),N=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"85px"}},"输入"),l("td",{style:{width:"413px"}},"1-2abcd")]),l("tr",null,[l("td",{style:{width:"85px"}},"输出"),l("td",{style:{width:"413px"}},"-1")]),l("tr",null,[l("td",{style:{width:"85px"}},"说明"),l("td",{style:{width:"413px"}},'最长合法简单数学表达式是"1-2"，结果是-1')])])],-1),W=n(`<h3 id="题目解析-2" tabindex="-1"><a class="header-anchor" href="#题目解析-2"><span>题目解析</span></a></h3><p>注意！！！本题原题描述中没有 / 除号</p><p>因此，本题的合法表达式不需要考虑 &#39;/&#39; 号，也就不用考虑除0，以及除法是整除还是小数除的问题。</p><p>另外，本题的 +、-号仅作为运算符号，不作为正负号。因此 &quot;+1&quot;，&quot;-1&quot; 这种不能理解为合法的表达式。</p><hr><p>本题可以分为两步求解：</p><ol><li>找出输入串中最长合法的表达式</li><li>计算最长合法表达式的结果</li></ol><hr><p>关于1的求解，有两种思路：</p><ol><li>双指针</li><li>正则匹配</li></ol><p>其中正则匹配实现起来比较简单，用于匹配合法表达式的正则也不是很难写，对应正则解析如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token punctuation">(</span>\\d<span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">*</span><span class="token operator">-</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>\\d<span class="token operator">+</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p>关于2的求解</p><p><span style="color:red;">对于JS和Python而言，可以使用内置的eval函数计算字符串表达式的结果。</span></p><p>更常规的思路是利用栈结构：</p><blockquote><p>找出最长合法表达式子串后，比如 &quot;1-2*3+10+2&quot;，我们需要注意表达式运算符优先级问题，即先乘，后加减，相同优先级的运算从左到右进行。</p><p>这里我的思路是将 合法表达式串 进行分块，比如上面表达式可以分为：</p><ul><li>1</li><li>-2*3</li><li>10</li><li>2</li></ul><p>我们可以发现：</p><ul><li>+、-运算符前面的操作数都是独立成块，比如上面表达式的操作数1，10</li><li>*运算符前面的操作数则需要组合成块，比如上面表达式的操作数2后面是 * 运算符，因此 2 需要和 3 进行组合。</li></ul><p>分块之后，我们只需要求各块结果之和即可。</p><p>具体逻辑实现如下：</p><ul><li>首先定义一个栈stack，用于保存各个块的结果；</li><li>其次定义一个块的值容器numStr，用于临时缓存分块的值；</li><li>最后定义一个块的系数变量numCoef，用于临时缓存分块的系数；</li></ul><p>扫描合法表达式串，如果当前扫描的字符c是：</p><ul><li>c 是数字，则直接缓存进块的值容器numStr中</li><li>c 是 + 号，则打断前一个操作数的收集，此时我们应该将前一个操作数计算结果后加入到stack中，操作数 = int(numStr) * numCoef，同时更新numCoef = 1，因为c是+号，所以后一个操作数的系数为1</li><li>c 是 - 号，则打断前一个操作数的收集，此时我们应该将前一个操作数计算结果后加入到stack中，操作数 = int(numStr) * numCoef，同时更新numCoef = -1，因为c是-号，所以后一个操作数的系数为-1</li><li>c 是 * 号，则打断前一个操作数的收集，并且 * 前后的两个操作数需要组合，而 * 前面的操作数记录在stack栈顶中，我们可以取出stack栈顶值 记录到 numCoef 中，即 * 前面的操作数，可以当初 * 后面操作数的系数</li></ul></blockquote>`,17),q=n('<h2 id="开源项目热度榜单" tabindex="-1"><a class="header-anchor" href="#开源项目热度榜单"><span><span style="background:cyan;">开源项目热度榜单</span></span></a></h2><h3 id="题目描述-4" tabindex="-1"><a class="header-anchor" href="#题目描述-4"><span>题目描述</span></a></h3><p>某个开源社区希望将最近热度比较高的开源项目出一个榜单，推荐给社区里面的开发者。</p><p>对于每个开源项目，开发者可以进行关注（watch）、收藏（star）、fork、提issue、提交合并请求（MR）等。</p><p>数据库里面统计了每个开源项目关注、收藏、fork、issue、MR的数量，开源项目的热度根据这5个维度的加权求和进行排序。</p><blockquote><p>H = W(watch) x #watch + W(star) x #star + W(fork) x #fork + W(issue) x #issue + W(mr) x #mr</p></blockquote><ul><li>H 表示热度值</li><li>W(watch)、W(star)、W(fork)、W(issue)、W(mr) 分别表示5个统计维度的权重</li><li>#watch、#star、#fork、#issue、#mr 分别表示5个统计维度的统计值</li></ul><p>榜单按照热度值降序排序，对于热度值相等的，按照项目名字转换为全小写字母后的字典序排序（&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,...,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;）。</p><h3 id="输入描述-4" tabindex="-1"><a class="header-anchor" href="#输入描述-4"><span>输入描述</span></a></h3><p>第一行输入为N，表示开源项目的个数，0 ＜ N ＜100。</p><p>第二行输入为权重值列表，一共 5 个整型值，分别对应关注、收藏、fork、issue、MR的权重，权重取值 0 &lt; W ≤ 50。</p><p>第三行开始接下来的 N 行为开源项目的统计维度，每一行的格式为：</p><blockquote><p>name nr_watch nr_start nr_fork nr_issue nr_mr</p></blockquote><p>其中 name 为开源项目的名字，由英文字母组成，长度 ≤ 50，其余 5 个整型值分别为该开源项目关注、收藏、fork、issue、MR的数量，数量取值 0 &lt; nr ≤ 1000。</p><h3 id="输出描述-4" tabindex="-1"><a class="header-anchor" href="#输出描述-4"><span>输出描述</span></a></h3><p>按照热度降序，输出开源项目的名字，对于热度值相等的，按照项目名字转换为全小写后的字典序排序（&#39;a&#39; &gt; &#39;b&#39; &gt; &#39;c&#39; &gt; ... &gt; &#39;x&#39; &gt; &#39;y&#39; &gt; &#39;z&#39;）。</p><h3 id="用例-4" tabindex="-1"><a class="header-anchor" href="#用例-4"><span>用例</span></a></h3>',17),X=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("4"),l("br"),t(" 8 6 2 8 6"),l("br"),t(" camila 66 70 46 158 80"),l("br"),t(" victoria 94 76 86 189 211"),l("br"),t(" anthony 29 17 83 21 48"),l("br"),t(" emily 53 97 1 19 218")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},[t("victoria"),l("br"),t(" camila"),l("br"),t(" emily"),l("br"),t(" anthony")])]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},[l("p",null,"排序热度值计算："),t(),l("p",null,"camila：66*8 + 70*6 + 46*2 + 158*8 + 80*6 = 2784"),t(),l("p",null,"victoria: 94*8 + 76*6 + 86*2 + 189*8 + 211*6 = 4158"),t(),l("p",null,"anthony: 29*8 + 17*6 + 83*2 + 21*8 + 48*6 = 956"),t(),l("p",null,"emily: 53*8 + 97*6 + 1*2 + 19*8 + 218*6 = 2468")])])])],-1),R=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"88px"}},"输入"),l("td",{style:{width:"410px"}},[t("5"),l("br"),t(" 5 6 6 1 2"),l("br"),t(" camila 13 88 46 26 169"),l("br"),t(" grace 64 38 87 23 103"),l("br"),t(" lucas 91 79 98 154 79"),l("br"),t(" leo 29 27 36 43 178"),l("br"),t(" ava 29 27 36 43 178")])]),l("tr",null,[l("td",{style:{width:"88px"}},"输出"),l("td",{style:{width:"410px"}},[t("lucas"),l("br"),t(" grace"),l("br"),t(" camila"),l("br"),t(" ava"),l("br"),t(" leo")])]),l("tr",null,[l("td",{style:{width:"88px"}},"说明"),l("td",{style:{width:"410px"}},[l("p",null,"排序热度值计算："),t(),l("p",null,"camila: 13*5 + 88*6 + 46*6 + 26*1 + 169*2 = 1233"),t(),l("p",null,"grace: 64*5 + 38*6 + 87*6 + 23*1 + 103*2 = 1299"),t(),l("p",null,"lucas: 91*5 + 79*6 + 98*6 + 154*1 + 79*2 = 1829"),t(),l("p",null,"leo: 29*5 + 27*6 + 36*6 + 43*1 + 178*2 = 922"),t(),l("p",null,"ava: 29*5 + 27*6 + 36*6 + 43*1 + 178*2 = 922")])])])],-1),S=l("h3",{id:"题目解析-3",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#题目解析-3"},[l("span",null,"题目解析")])],-1),T=l("p",null,"简单的多条件排序题。",-1),I=l("p",null,"具体逻辑请看代码实现。",-1),F=n('<h2 id="虚拟理财游戏" tabindex="-1"><a class="header-anchor" href="#虚拟理财游戏"><span><span style="background:cyan;">虚拟理财游戏</span></span></a></h2><h3 id="题目描述-5" tabindex="-1"><a class="header-anchor" href="#题目描述-5"><span>题目描述</span></a></h3><p>在一款虚拟游戏中生活，你必须进行投资以增强在虚拟游戏中的资产以免被淘汰出局。</p><p>现有一家Bank，它提供有若干理财产品 m 个，风险及投资回报不同，你有 N（元）进行投资，能接收的总风险值为X。</p><p>你要在可接受范围内选择最优的投资方式获得最大回报。</p><p>备注：</p><ul><li>在虚拟游戏中，每项投资风险值相加为总风险值；</li><li>在虚拟游戏中，最多只能投资2个理财产品；</li><li>在虚拟游戏中，最小单位为整数，不能拆分为小数；</li><li>投资额*回报率=投资回报</li></ul><h3 id="输入描述-5" tabindex="-1"><a class="header-anchor" href="#输入描述-5"><span>输入描述</span></a></h3><p>第一行：</p><ul><li>产品数（取值范围[1,20]）</li><li>总投资额（整数，取值范围[1, 10000]）</li><li>可接受的总风险（整数，取值范围[1,200]）</li></ul><p>第二行：产品投资回报率序列，输入为整数，取值范围[1,60]</p><p>第三行：产品风险值序列，输入为整数，取值范围[1, 100]</p><p>第四行：最大投资额度序列，输入为整数，取值范围[1, 10000]</p><h3 id="输出描述-5" tabindex="-1"><a class="header-anchor" href="#输出描述-5"><span>输出描述</span></a></h3><p>每个产品的投资额序列</p><h3 id="用例-5" tabindex="-1"><a class="header-anchor" href="#用例-5"><span>用例</span></a></h3>',16),V=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("5 100 10"),l("br"),t(" 10 20 30 40 50"),l("br"),t(" 3 4 5 6 10"),l("br"),t(" 20 30 20 40 30")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"0 30 0 40 0")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},"投资第二项30个单位，第四项40个单位，总的投资风险为两项相加为4+6=10")])])],-1),G=l("h3",{id:"题目解析-4",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#题目解析-4"},[l("span",null,"题目解析")])],-1),_=l("p",null,"第一眼看这题有点像二维费用背包，但是本题备注中有一个关键限制：",-1),j=l("blockquote",null,[l("p",null,"在虚拟游戏中，最多只能投资2个理财产品；")],-1),K=l("p",null,"那么本题其实就变成了：m个理财产品中选1个或2个，所选产品风险值之和 ≤ x，投资额之和 ≤ n，并且最终所选产品的投资回报之和最大。",-1),Z=l("p",null,"由于 m 的数量级不大，取值范围[1,20]，因此可以考虑暴力破解。",-1),M=n('<h2 id="最长子字符串的长度-一" tabindex="-1"><a class="header-anchor" href="#最长子字符串的长度-一"><span>最长子字符串的长度（一）</span></a></h2><h3 id="题目描述-6" tabindex="-1"><a class="header-anchor" href="#题目描述-6"><span>题目描述</span></a></h3><p>给你一个字符串 s，首尾相连成一个环形，请你在环中找出 &#39;o&#39; 字符出现了偶数次最长子字符串的长度。</p><h3 id="输入描述-6" tabindex="-1"><a class="header-anchor" href="#输入描述-6"><span>输入描述</span></a></h3><p>输入是一个小写字母组成的字符串</p><h3 id="输出描述-6" tabindex="-1"><a class="header-anchor" href="#输出描述-6"><span>输出描述</span></a></h3><p>输出是一个整数</p><h3 id="备注" tabindex="-1"><a class="header-anchor" href="#备注"><span>备注</span></a></h3><ul><li>1 ≤ s.length ≤ 500000</li><li>s 只包含小写英文字母</li></ul><h3 id="用例-6" tabindex="-1"><a class="header-anchor" href="#用例-6"><span>用例</span></a></h3>',10),H=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},"alolobo")]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"6")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},`最长子字符串之一是 "alolob"，它包含2个'o'`)])])],-1),z=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},"looxdolx")]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"7")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},`最长子字符串"oxdolxl"，由于是首尾连接一起的，所以最后一个'x'和开头的'l'是连接在一起的，此字符串包含2个'o'`)])])],-1),P=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},"bcbcbc")]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"6")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},`这个示例中，字符串"bcbcbc"本身就是最长的，因为'o'都出现了0次。`)])])],-1),Y=l("h3",{id:"题目解析-5",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#题目解析-5"},[l("span",null,"题目解析")])],-1),L=l("p",null,"本题很简单，只要统计出输入字符串s中'o'的个数：",-1),D=l("ul",null,[l("li",null,"如果 'o' 为偶数个，则s本身就是一个含有偶数个'o'的子字符串，结果输出s.length"),l("li",null,"如果 'o' 为奇数个，由于s是环形的，因此只要任选环中任意一个'o'解开（删除），剩下的就是含有偶数个 'o' 的子串，该子串长度为 s.length - 1")],-1),O=n('<h2 id="最长的指定瑕疵度的元音子串" tabindex="-1"><a class="header-anchor" href="#最长的指定瑕疵度的元音子串"><span>最长的指定瑕疵度的元音子串</span></a></h2><h3 id="题目描述-7" tabindex="-1"><a class="header-anchor" href="#题目描述-7"><span>题目描述</span></a></h3><p>开头和结尾都是元音字母（aeiouAEIOU）的字符串为元音字符串，其中混杂的非元音字母数量为其瑕疵度。比如:</p><ol><li>“a” 、 “aa”是元音字符串，其瑕疵度都为0</li><li>“aiur”不是元音字符串（结尾不是元音字符）</li><li>“abira”是元音字符串，其瑕疵度为2</li></ol><p>给定一个字符串，请找出指定瑕疵度的最长元音字符子串，并输出其长度，如果找不到满足条件的元音字符子串，输出0。</p><p>子串：字符串中任意个连续的字符组成的子序列称为该字符串的子串。</p><h3 id="输入描述-7" tabindex="-1"><a class="header-anchor" href="#输入描述-7"><span>输入描述</span></a></h3><p>首行输入是一个整数，表示预期的瑕疵度flaw，取值范围[0, 65535]。</p><p>接下来一行是一个仅由字符a-z和A-Z组成的字符串，字符串长度(0, 65535]。</p><h3 id="输出描述-7" tabindex="-1"><a class="header-anchor" href="#输出描述-7"><span>输出描述</span></a></h3><p>输出为一个整数，代表满足条件的元音字符子串的长度。</p><h3 id="用例-7" tabindex="-1"><a class="header-anchor" href="#用例-7"><span>用例</span></a></h3>',12),$=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("0"),l("br"),t(" asdbuiodevauufgh")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"3")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},"无")])])],-1),ll=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("2"),l("br"),t(" aeueo")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"0")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},"无")])])],-1),tl=l("h3",{id:"题目解析-6",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#题目解析-6"},[l("span",null,"题目解析")])],-1),el=l("img",{alt:"",height:"799",src:"https://img-blog.csdnimg.cn/75a9cd9bc529429498db58f1cc4ef433.png",width:"1200"},null,-1),nl=l("p",null,"当两指针之间划定的子串的瑕疵度diff 大于 指定的瑕疵度flaw时，则左指针 l++",-1),sl=l("p",null,"当两指针之间划定的子串的瑕疵度diff 小于 指定的瑕疵度flaw时，则右指针 r++",-1),al=l("p",null,"当两指针之间划定的子串的瑕疵度diff 等于 指定的瑕疵度flaw时，则记录当前子串长度，并r++",-1),il=l("p",null,"按以上逻辑，直到r指针移动到idxs数组的尾部。",-1),pl=l("figure",null,[l("img",{src:"https://cdn.staticaly.com/gh/BZT2017/oss-img@main/eb378b5515874c268c7f1fe75ad03674.png",alt:"",tabindex:"0",loading:"lazy"}),l("figcaption")],-1),dl=l("figure",null,[l("img",{src:"https://cdn.staticaly.com/gh/BZT2017/oss-img@main/75a9cd9bc529429498db58f1cc4ef433.png",alt:"",tabindex:"0",loading:"lazy"}),l("figcaption")],-1),rl=n('<h2 id="最富裕的小家庭" tabindex="-1"><a class="header-anchor" href="#最富裕的小家庭"><span>最富裕的小家庭</span></a></h2><h3 id="题目描述-8" tabindex="-1"><a class="header-anchor" href="#题目描述-8"><span>题目描述</span></a></h3><p>在一颗树中，每个节点代表一个家庭成员，节点的数字表示其个人的财富值，一个节点及其直接相连的子节点被定义为一个小家庭。</p><p>现给你一颗树，请计算出最富裕的小家庭的财富和。</p><h3 id="输入描述-8" tabindex="-1"><a class="header-anchor" href="#输入描述-8"><span>输入描述</span></a></h3><p>第一行为一个数 N，表示成员总数，成员编号 1~N。1 ≤ N ≤ 1000</p><p>第二行为 N 个空格分隔的数，表示编号 1~N 的成员的财富值。0 ≤ 财富值 ≤ 1000000</p><p>接下来 N -1 行，每行两个空格分隔的整数（N1, N2），表示 N1 是 N2 的父节点。</p><h3 id="输出描述-8" tabindex="-1"><a class="header-anchor" href="#输出描述-8"><span>输出描述</span></a></h3><p>最富裕的小家庭的财富和</p><h3 id="用例-8" tabindex="-1"><a class="header-anchor" href="#用例-8"><span>用例</span></a></h3>',11),ol=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("4"),l("br"),t(" 100 200 300 500"),l("br"),t(" 1 2"),l("br"),t(" 1 3"),l("br"),t(" 2 4")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"700")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},[l("p",null,[l("img",{alt:"",height:"223",src:"https://img-blog.csdnimg.cn/d42fa1105adb4ffa9d61f8504727b4a5.png",width:"294"})]),t(),l("p",null,"成员1，2，3 组成的小家庭财富值为600"),t(),l("p",null,"成员2，4 组成的小家庭财富值为700")])])])],-1),hl=l("h3",{id:"题目解析-7",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#题目解析-7"},[l("span",null,"题目解析")])],-1),cl=l("p",null,"简单的逻辑分析题。",-1),ul=l("p",null,"由于题目输入会给出 树形结构 中，父节点->子节点 的信息，比如下面红色部分",-1),bl=l("p",null,"4",-1),gl=l("p",null,"100 200 300 500",-1),yl=l("br",null,null,-1),xl=l("br",null,null,-1),ml=n('<h2 id="最多购买宝石数目" tabindex="-1"><a class="header-anchor" href="#最多购买宝石数目"><span>最多购买宝石数目</span></a></h2><h3 id="题目描述-9" tabindex="-1"><a class="header-anchor" href="#题目描述-9"><span>题目描述</span></a></h3><p>橱窗里有一排宝石，不同的宝石对应不同的价格，宝石的价格标记为 gems[i]</p><p>0 ≤ i &lt; n n = gems.length 宝石可同时出售0个或多个，如果同时出售多个，则要求出售的宝石编号连续；</p><p>例如客户最大购买宝石个数为m，购买的宝石编号必须为：gems[i]，gems[i+1]，...，gems[i+m-1]</p><p>0 ≤ i &lt; n m ≤ n 假设你当前拥有总面值为 value 的钱，请问最多能购买到多少个宝石，如无法购买宝石，则返回0。</p><h3 id="输入描述-9" tabindex="-1"><a class="header-anchor" href="#输入描述-9"><span>输入描述</span></a></h3><p>第一行输入n，参数类型为int，取值范围：[0,10^6]，表示橱窗中宝石的总数量。</p><p>之后 n 行分别表示从第0个到第n-1个宝石的价格，即 gems[0] 到 gems[n-1] 的价格，类型为int，取值范围：(0,1000]。</p><p>之后一行输入v，类型为int，取值范围：[0,10^9]，表示你拥有的钱。</p><h3 id="输出描述-9" tabindex="-1"><a class="header-anchor" href="#输出描述-9"><span>输出描述</span></a></h3><p>输出int类型的返回值，表示最大可购买的宝石数量。</p><h3 id="用例-9" tabindex="-1"><a class="header-anchor" href="#用例-9"><span>用例</span></a></h3>',13),wl=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("7"),l("br"),t(" 8"),l("br"),t(" 4"),l("br"),t(" 6"),l("br"),t(" 3"),l("br"),t(" 1"),l("br"),t(" 6"),l("br"),t(" 7"),l("br"),t(" 10")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"3")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},[l("p",null,"gems = [8,4,6,3,1,6,7], value = 10"),t(),l("p",null,"最多购买的宝石为gems[2]至gems[4]或者gems[3]至gems[5]")])])])],-1),kl=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("0"),l("br"),t(" 1")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"0")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},[t("gems = [], value = 1"),l("br"),t(" 因为没有宝石，所以返回0")])])])],-1),fl=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"84px"}},"输入"),l("td",{style:{width:"414px"}},[t("9"),l("br"),t(" 6"),l("br"),t(" 1"),l("br"),t(" 3"),l("br"),t(" 1"),l("br"),t(" 8"),l("br"),t(" 9"),l("br"),t(" 3"),l("br"),t(" 2"),l("br"),t(" 4"),l("br"),t(" 15")])]),l("tr",null,[l("td",{style:{width:"84px"}},"输出"),l("td",{style:{width:"414px"}},"4")]),l("tr",null,[l("td",{style:{width:"84px"}},"说明"),l("td",{style:{width:"414px"}},[t("gems = [6, 1, 3, 1, 8, 9, 3, 2, 4], value = 15"),l("br"),t(" 最多购买的宝石为gems[0]至gems[3]")])])])],-1),vl=l("table",{border:"1",cellpadding:"1",cellspacing:"1",style:{width:"500px"}},[l("tbody",null,[l("tr",null,[l("td",{style:{width:"86px"}},"输入"),l("td",{style:{width:"412px"}},[t("9"),l("br"),t(" 1"),l("br"),t(" 1"),l("br"),t(" 1"),l("br"),t(" 1"),l("br"),t(" 1"),l("br"),t(" 1"),l("br"),t(" 1"),l("br"),t(" 1"),l("br"),t(" 1"),l("br"),t(" 10")])]),l("tr",null,[l("td",{style:{width:"86px"}},"输出"),l("td",{style:{width:"412px"}},"9")]),l("tr",null,[l("td",{style:{width:"86px"}},"说明"),l("td",{style:{width:"412px"}},[t("gems = [1, 1, 1, 1, 1, 1, 1, 1, 1], value = 10"),l("br"),t(" 最多购买的宝石为gems[0]至gems[8]，即全部购买")])])])],-1),Al=l("h3",{id:"题目解析-8",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#题目解析-8"},[l("span",null,"题目解析")])],-1);function El(Bl,Ul){const s=p("SandPack"),a=p("font");return h(),r("div",null,[u,o(" ## <font color='red'>停车场车辆统计</font> "),b,g,y,x,m,w,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJx1U1FP01AU/isne2mbzJXJG26LxCdM9GW+OR9KdyeN3W29vZ2SZQkQgS3CRgIxOolhigiJCfgiuk34MdJue+IveG7vuiBommy35/vOd76ec241oXvM1GddN1XxSWImkfFMZrkcPMJ9N1egVtl1GIcqMFKCGpSYUwYFqcqdAi1Qm3AEPMgKWFUUTYYs6vo8j2njeDqZTk7hI/7FKS2IJZ+a3HIolKgaJ2hQxZIlmASyWRRFEe4zCoZNGFeV4fHp8Gw7WP182V8WQgC6DsHJWthYCncbl/2NoNkLmw0BCDOmwYTBWDHFiGsbJpm1bVVJ4jORGHW6QbcVnNVH65vDg+XfSyvBan2im06nw/fn4ebHsL41LYqsbV7BJtBtAe0eooXRu32JTolQ4+jix+tB+1Vw8i18eyyB4a+D4dmaqC48ZsXPX+6wJPqbVrRrUQzevhacmnwIjiNVMWyf4DdHijahT/lCgdYKNKPL6eJc8YWTMgpwgm8AGTcX7LfDrx3Z2sHO4eCoG+71R+2doL+U0cUuICvqIlRulZ0isbNK3FQFdInP+5zjSO+atmU+yypXR6tAbrDyM1jvDc+3hp2NjC65Mm8hnbvofRrsLUtw0NsOP+xe9ttVsXge1GoZHSniC664Fg/O7VFeeha/690oZDrUw820owV87luMqAojRtG2KMHOmXjmZI5ywkrYQbUqt2MGXOaYxPNSHi9aFGoaLjmqVQwGFnKFmv04v1ied+yU4S1Scw6jBnfYE3VMHRcel8KEiAaqBtkcqMYLw8LbgUkpSl5yVdPkqKK7JAo5VhFZUcrkemAuXgpEcU0idbHNUimuE1evaf/1EbehkIiDhYTgRuz7RsXIy3v/EAcLs/cehIedoN+CsPklqH8PWifjFjdPg9abmy2Wijf7Ovb9r+4mx5jj8+sghiQaDSA6MTvlUDQvjSdBFYeoqbJGxEzU/gBmb+66",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),k,f,v,A,E,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJxtVFFr01AU/iuHviSBLsHX2RbnW587EF0npMkNvS69N97ctJulsIlaB9scbqLUOTbcREEtiCC2xf2ZJe2e9hc8N2nrHiQQbs75vnO+c+45aeesUDjWUhCYzYjkFnOF0BE0kBASGQWlKqONgAsJbRDEgw54gjdAQ6h2u8qqzCcSHSEUlVvXNCMzSbIup7ZqbrlOwIuErJNQgktDaTOHAGWAFmhx4bt5KIfAuIQakS1CGPjUI2AzF1xiy3oe7kYSWnV0lEHRXcVGJUwC92CDR3m4j1nxAC5nmoQ1xlsY3pZI8HmTKJdZzU3VURZEsoJF3VDtRcyRlGNYpiv1+TnKgHaVAVAP9JmpWEQOcmUkGNg+EVLXJv1fkz8H8fPz69GWCghgWRC/fBFv/0i2N5Oj7XHv2dWH4/jb26S/ez3aifeGV91dhVOSbCFQzYppmoy0oEJkKsIMA59K3Vp5aC88WVp4sGoZxuo0NPZByPAelfXrUS9514/3P10Oz2cK49FmfPYTU8a7byb9NA1yJhfdZHgWdwfj99+Tk27mQy3J3ut48EqB8C7Npu1HBNWgJtOjviRC16lRLKVtUJC0bGr+UzBvjAEK0zHMEGdGN8xHnDJdA9WPTpUVrGy2cKrwQ5JG4NuS4BdAISjFZ73k62nWw/Hh5/GXQXIyuuodYikFS00iotI80FxocJf4RU31SAOrVKiJ//pnshQm9dciKfGO7zg+ddaK2uyu5/I1KI2f/o67w8nF/uR0p2BlhIxcv1W6HH4cn2xlzvHwIDk+wua31W6E0OkULISoMm+Uph7s/HIlK0y9u4PU5HCG+yD8dAofR1QQXRPEdn3KiGaYDp4lKTNsv2c7RG9nA7kIgeAOCUNsv4tb0DFwDzFa0xZAEaui+SuVjUaN+6YdbjCnjFZbcrGqT6HTxNNU6qIVDHQDiiXQ7ZZNcUWQhKO4jpdoZAORrrtKxKmLqJQyXxrk4nSgF6bR1R8hizTLM8veMdJTrvMXdlTDGg==",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),B,U,Q,t(" ### 题目解析 本题应该就是一个逻辑模拟题，以及考察集合的应用。 "),J,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJyFVFtv00oQ/itz+mJb5djNkc5LSaJzHnkub2keXGdDV9hrs16nVMESrcS9ICQQoHJRKygXqajAC9BE9M/UTnjqX2B215u0XBMp2Z355pvLzkx/xkt54P2fJG4vIzPzM/U04DQRkBKRJc1FRqMk5gL6wEkXcujyOAILodbpRbbIQiJQkUJDqm3LcrSIZZER/WtklCWZWECqSvEPBHGEIsrOGYif0AmVt5z5K4R6E5DHYi9mBH5QGMlUE8ZZ53v4CuUkJGlayaXLbsYCQWMGXWZjxKdMhKdkHA70Mfku2EbaaGB6GJvIOAM/JFzY1njv4/jLveLKztFwTTICyDRC0iMh5mEs3TQJKaLBclpzbYOKfBEs/wJVm6AYESsxPy/LIqM6BpryJKhs9XNl43nwde12cedq+XCnOHgoRYbCRaRtU6fRxMwAP6rknPurMgrD7GnmY0zF+/XR/quj4cZod3cOL+W7T+ODJ+WH7fLJDZQeDu7UiuHl4tUtbdeNOdj6wTvkIlLXTlfHuvbmhoSdE8uVdHZWVVpaAnYESwXgO0WEyUZR+JbCtbHfNIh27b8wlUrs9GWkxcv18lkV0yTe4vrjYrCvr8YYZL0qU3TQb1XO2vO13GByEqZkEpOqRMV/gvxF+eDteG9HSw4/3ypu3C4f7RV3X2q/U3sMeOp04vBY2ifDmiBmZ6XrE04vD4ubW7WpXY7FSskfmeQrKC7zaMX1p/hgxcaD76szLYI+qL9ctQTOudvzw4wgm/Sh2rzdUn3chkuXYG6RIbzu6Q2CuwMvgkRJ6AuCN4B60ixebJa723poRvdfj97sl1vDr5v3sYPqntw3iFITAb2/o7hDwoaFo2mB16wv8Z+q5Vj8Tm/m6wRmKRMCB/+/IKTB+Yb10wVgQXO0/rm4Nhgf3B1vb9Q9baQJlmvNw8Hz0daaVo4G97A/joabfbkoU8jzuocQWY1jFZBffIWzCzp/+XsN+wRFuvG53BqcXMhwV9kWJ34npHJVuQGeBTnDBOFdPyB2X2+NeUh4HOBSc1PRoQzfCYcE2Xo+B4pYyRa2FlajpTh0/XSVBWdQ6ouYt+0KWjmuXMmRkzCwHWg0wfZXfIqDjEYuIxeF7Ti6A9Tul45i2kGUMplsU7TFfkStmWe1vBST8WO85446zeTfAA/fh+Y=",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),C,N,W,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJxVU0Fr1EAU/ivPvSRpaWI91iTowUPBW8VL00M2O9sGZydxMtluWQKtKNuCqNAWYS3SogUF0SKC2K7tnzHJ9tS/4JvMZtvuQjJ57/ve+97MN/2GlfDAehjHZjcljYWGnQQ8jAUkRKSx67GwE0dcQB84aUMGbR51QEOodt9jHqNEYCIBR6Z1TTNUKGRxKpaQNonPz93zm0FLptspC0QYMWgzvYYZ0MdGbZgGHAdLIVWknIFPCRe6Nv7xe3y+m786vhptyUIAQcQS2X4V21i67nmt2eXZmbkVY0YuDWu1kgj4k5o6fu8xYY96MaK9htfAZJ3CCZ76FOOapoKWBcXOeb59km8P8p2f5fBlcbB5uX9Rfn+fj94qzPpaSAno+pSMQkzSI8H1WAbccYCllFYDSlItmlQyFHX57spUKIDcBsyalLBVsQbute5J6EYtuDUUsiYzAWRqMXnhOKTr03zwt9g/KT/8Kt4cjy/e4TAyjSJMTKZElsCFPq2Jm4wFbEs5Ar2AH4J0YuoLgl8Aduzmn4fFtyN1MOXel/LraXE4uhzu5aNN25L+QVS1H9Cd60QtQh2t3h4NLNducoVppkKgKR4ENAyeOdpNc2jgli/+5IMz1Dw+em1bCqt4a/Puv7NP5eGWSpZnu8XHg6vRsC8Nm0CW2RZC5BQ3lMs/7smTJaVbPgenVWhiKXWcz9OQE13jxG/RkBHNMANcC7LIBOFtPyB6Xzl9AWIeBSRJzES0QgaZgQeB1bo+hxCxshpdXtroNCNq+skGCxYx6ouIr+gTaO1l1QoJFQx0AxwXdH/dD/FWIclkpCd0w1BHVvlGNorCFqIqyvSCIRedgtnadPKaqkp1n7p7ZlSrRvYfsdmELg==",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),q,X,R,S,T,I,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJydVVFv2zYQ/iu3PETUkkiWrTqOa7srhj0U2Fv25viBVuiamERpFOUsMAysA4a+7GFA+xQMQ4ttwAYU6GPRJmj/TBOnT/0LPYqUHAdBERQCxOPdd3e8491xvuHnMvLvZ5k3K9hGd6OXR5JnCnKmimxwIHiSpVLBHCSbwAImMk3AQahz90AciJgpFOTQ12IyHLmGJYrEspzQsbwjxh9OVQV1OtCGJuC/knORFWpfqqBCRDThMYV2G3YbELYhuNOBTuM6vFnBZzxSqeQU9kLYbUMHFTp70AyC6xqtSoMKNU3FMTT3INiFTgvBEHauw8MKzvA4x3CnBXu7EECgbZfgSSEixVMBE0Ew8G0b6HYdUE01a6pVU6EL8wMBOovejMYFQ3fDEeZ9AuQrbW9z0xrc3KwtrsjmimytyNB10aAqpAAaM6mIc/ny1eXbJ+e//fvx7JE+NECUiry6lftSolvrx8uzmKMKGFydCwMa1oe4gltFeBOzdRMzvMLEcI2fhGY2fIBJKoGUzpHVuItLrz6HFzPxUE2RubVl8wda2cuKfErsHkDQhHVrpSEfDRuj7UqIye4Cwz+pc4Bi+HoNH4xga5UjvV2XN9fluF2Xt9bluF2Xh7pj9GkW5brQPx1Hjj1HCN0eu/2BDYdPCNUVAv0+jDVRBw5APR0q5skQnkq/T4+Y/JbmjFgHgEoWZIibQVXVWGwFhnvQgG7FHljuPeyDLuwENgSzWAvlEWEHVXAtYyt96ODwZr+j0ZSwmCVMKOgPqkjqJjAXaQGlL5MfF6cO+un5ZkrhfMKNYkkWU8VwB9DLBuf/nFy8eG7Kffn0v+X/by6enX04eXp+9kvP1zMNUeUlwGwnSQ9Z3HewzxzwB72xvFFsO+NzkLotbgNq3gbUug0oXAONC6VwEH0TxTz6se984UByYLD89fX549PLd39cPv+95xuzxsU0GLw//Xv57JERLk+fXPz158ezk7l+IXJYLHo+QvQVXbkW/fk+/LBvLkX/H78pWWYKSaxqVP+p4JIRRzJ6GHPBHNeLkFbsgVBMTmjEyNx0TxcymUYsx1mlDrkwdYHWZlQCR6y2Fg/3j5NxGns0PxbRA+RSfB9GxEKtY+tKt46GAXF1ORJ6RDlOHlTyBPtZEdc1dVk+etpRyg8RVarU8x91sY5RWg1X/dgZS5WfyvvCLamNxSd3OZFq",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),F,V,G,_,j,K,Z,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJxNUsFq3DAQ/ZVhL7IPtek1tU17zHl7q3vQamUqKsuuJG8bjKEplFx6KCSnpZSEttBCoceS7JL8THa9OeUXMrJ2wyIQ0sx7855m1I5io1n8oq6jWcNHB6PEMC1qC4bbps5yJcq60hZa0LyADgpdlUAQSp7lKleSW0wYSF06ICT0IaHqxo6RthcvGsWsqBQUKtjlQ2hRoYDHQJoiFjm20Qqo5NoGZPPv/+b6dPX51/3y2BXKVZerJPY+0SFeLC9rSS3HG0BSZ6uf8/XfC8/qz373f67W58u7+dlq+TGJ3asQNUjC7ElZTblMyc4BgThLJtpjJo216Pg5k4K9Tcm+cwJZ/+lydbLY3HzdXHxJYo/1vDdPs9vFj/782Cf7xen6+7f75bx1bTTQdUmMEPeKPeduxTG8HHvfbj+5GkKsUgb7LId2vmuE5gHRnE6lUJyEEcOz5YfKcl1QxoPW9/8Aal0xbkxk7FQo6EIcGVabUQ0Csa6afDU+KieVjKg5UuwQo9RW+nWwhW6Ft1JIGGAQhJBmEND3VOCskRQp/sEGYRjNqGz48DOcUCWmiBooj9NHLs4cs7Ct7j6Pr7TT2al34XAadQ95kQWh",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),M,H,z,P,Y,L,D,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJyFU81u00AQfpWRJWRbVe2WY7EjEKeeww1zcDZrarHZNbvrQIksUQTqhQNSyyVCqBUgAQLBjdJE8DJJHE59BWa9TtpbLWvlnfnm++bPIydUkoR3iiIYltTZcSJFZF5oUFSXRSfh+aAQUsMIJM2ggkyKASQOYhPnVsITzqhGl4LYADzX9a0p50Wpu1qu7CkTTPSEcWclJzoXHDLurWA+jFAqg7UhjpEKQ3UpOaSMSu25yx+/ln+O5q8+XUwPDBFAGLZCUs/OvrvCrccvZ2dfF29/Gq/J4xmV4q4oucZEtpqEATIhwTNOAiJbZ9qkAPiYNAjEMZYpEse/pNjYQAKAyhwGdMl9A26agK01B3YkGKaspPGaP2CUP9R7DQNQpuj1WNiE7VYRXyz2Xtc2wJyH542JCK5wAqxp9OMyl9RLHEnTPss5zsgPCF403eWayiwl1BtZlR0opCBUqUDpfs6h8rE45BumEnLEGj52v7s/6AkWpGqfk120plrIB14LbaVbLQxoYOD5EHfAS5+kOe4BBgWcPtWe79sqmyEYIZH3EdWErFcCY7Er6IWW3SyWZVrprNQrv/lKeBTalcVlxYumg4JhwXgDiIrO/ON48e3Utq0+/lx/OV+cTP+Nj+fT51FoFhxRTUNguDkQfcrixFmNIXEgtIheqTWmd5uwnDyK3aub60KnfvF7fjhZ/n2zPH0dhRZr4/a2O7PJh/rkwDrrydHi/buL6Xhk/icFVRWFCDE1XMk74U71H7k4WHE=",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),O,$,ll,tl,el,t(" 瑕疵度计算规则如上图注解所示。 "),nl,sl,al,il,pl,dl,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJxtVM9rE0EU/lceuewuaXfba5sEe/DQgwhGT0kO081sMziZXWdmk5YQsIL04kFpVSgiLf5AQepJxDboP2O68dR/wTc7u0mwQkhm3vu+9735MvNGlUDJMNhKEn+Q0spGpaZCyRINiuo0abQF6yex1DACSSMYQyTjPjgIdTbboi041ZhQUDdp13E8G2IiSXVTyzK+BkR1d1IWd+mApGm02zPIKBWhZrGASLglw4NRWwCwCOaheh3rYh2dSgGEU6ldZ/b1++zn0fTph+vJASYNZaErtWmopPsq4QwpYCTBdOsPCE8pQnapvkdVynWhhcTWWmdlsVnvIMew5q0uKBEnwxU17xggjIXKfcPKgg6hSbXbrhDK4nTr9vbdB+2Kl3u2wLLunum01cG4iUaxBDc/B0bXNvGnBqjgcyp2dQ/31epczXqEan6PKBdRLdbxvLykn6Sq5zKjZnDjUtRUJsIorhUpExHGK8MqVJbR/B+s+UPN3kaGPcYpuBK7FEt9BQFkL15mr75NLz7Ozs+y89dlxpTosigqFFuyA6t2xc0KK60CX5hkj5gTGmDsXhLBYtVq0RkeEShXdAGv3YTLm/ClrLXlDtE9v0/2XNyu/KfFKqyXpt4oOfc6zxSXVagcgFH8oC/3m/bWmu/Dizxkb4I0Tkv6KGWSuo6kpMuZoI7nh7jWdFtoKiMSUndk7/UGJDIOqVK+0l0mYGz6wmoDIoEh1lTjreZ+fyfmPlH7ItzGKNGx7LgFtBAupJCQw8D1oN4AlwwJw3uIJF/QPe16nn01+Z9jhGLWRVROmT8O5KKnmJ0/BlM2r1TqlOpjL1/VAjtucNDgRtN+wvG4uAOoJY3p+5OrL2fWsuz4U/b54up08ufkeDp5XAvMcEJUbgcMVvs4W3jdKV+9A4HN76RaY2u3Qs7Ch3VnedQ40Mie/JgeXs5+PZ+dPasFFmt5vfXG78t32emBTWaXR1dv31xPTkZmEioYj2sBQswJlrpui8r4L/BU13U=",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),rl,ol,hl,cl,ul,l("blockquote",null,[bl,gl,e(a,{color:"red"},{default:i(()=>[t("1 2"),yl]),_:1}),e(a,{color:"red"},{default:i(()=>[t("1 3"),xl]),_:1}),e(a,{color:"red"},{default:i(()=>[t("2 4")]),_:1})]),e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJyVVM1u20YQfpWFLyThhNRPe0kkoT3m0F7cmywUNLWEiVJLdrl0HQgC7MCNldg1XMRJAycp5LZBUqSJdGgbW1Kjl9GS7Emv0FkuyciA0aYSSCxnv5n59puZ7a4YAbWMT31f3wrxyo2VWmBRx2cowCz0G+vE6fgeZaiLKLZRD9nU6yAFoMrNdbJOXMxgI0B1sa0qiiZNJDd8pGjIMFDUP+bfP452JtHDkUQ4xA/ZGgTOgOVSCVXgqcLzcam07Baf7iW//8SHh3xnmoX32vgWsb1y4Y0q0iO5fye+czGfnUW7w8vYynts9b+w1RxbQdkBLmPtkFjM8QiyiUqu5Ue5VtAqVpViVdVQF8S0kZrD63WQC9KwkBJkupgyVUmGb5N3D/i3zxfTXaElErn5ZBy/OsgYnB8VWoAu0eMBH+0tpod8dLcUHb3k/VH0dIff+y5+NQTr/K+ZdFtM+5n/5KjMpzv8xcFieg+Czc8PosE+H17w8Unyx9vo2XORNNdC1DWnqwe+6wBFpGh6x/TVz8POBqYpxxSqhyTYdGymlgre/WeQhx8+ivt/xuMXy9QL3tGji/m7GT8+iievk9mT5OwweXMWv/khZ2GbX3aARFPX9TRL6ypN0qoINR6O4sle7mpSKjyLoiwd4H19rjJWl4yQT8SzPYpU2bZtvA1hSzezZQ2p5HpZyz5XV9MyI/gJkqO7/PWxJFk0McgAemTGJ+f8/kDixUmbwLmZBmo1S60WWq1LbZft5VaqQU+8YPL0LdMNcf0zk21CWbZVEEpEghoAombIYYYxhg+GO75rMgxfCNX8Bv/lNPrtTPZbfPIy/nUcDaZ/n55Af9QMMfqASquPtq53gIZbV4iCjEZtg165mXfKv2GKanwIqPIhoOol0EbIGMzlJ5brWF/Vlf8znwpqQEn4/iSZHUMf1gwZS8bdLDfmk5/jwa7cjCcPoh+fLqanXXEvBqjXqxkAEYovqSz+0AZfrEmNxXt/nJosjwRwcbrpPfN16FCsKhSbbdchGObLgjUDWgxT27Sw2pVTeAP51LNwEOgBazsE9TS4gyHalkmRA1gRzW2u3e5seK5uBreJdQusJvNoS82gWeIsFTikMKRqqN5AqvmN6UCPg5NO8DZTNU22V3rVi0Se0wZU6lLcgeALLQ+7KIsubg0ZKc+TZ+9p6Wql9w92Taws",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),ml,wl,kl,fl,vl,Al,e(s,{title:"%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8",template:"vue",files:"eJxNU8Fu00AQ/ZVRLrZlajcCAWptix57DrckB9dZixXrtdldh1aRJYqEeuGA1J4ihFoBEkhIHBFNBD9D4nDqL3TWa6e1LXtn5s17OzvjWc+XIvEPisKblqS31wtkImihQBJVFtGI06zIhYIZCJJCBanIM7AQau2P+IgzojAgIdRh27Ic4+Jl1rmedD7Ki1INkKoNPIVH8BgeQh/fW9A0Zl28v6udackTRXMOKbc7BgdmuK8Uto4wRGXMUqXgEDMilG1tfv7a/Dlfvft6szzVRACaPxYC+bs8TxaMIhbuAFp+tzM09s4g8qDJHo61K80F2KauCTnWwP12Gejyd/qt6brNdgEvmtqoP2RjV3/EOELcNogirvtAuK4xK/NpbbTwCXzTG+wKGopkBYsVQQsgKKLVl/n6x5Wpub74Vn+/Xl8u/88vVss3ga87iaimcJjuZPmEsNDqzsEC38SPSqXwrJ8ljCYvQ+v+mVsQ1W9/r84Wm78fNlfvA99gTd6LfvRv8bm+PDXBenG+/vTxZjmf6bGRUFWBjxBdwb1d69v34fnA7Fm/z64bV5JziQduRuFVSQWxLUHiCaOcWI6X4FqRQ66ISOOE2DPT0D0oRJ4QKT2pJpRD5eCIIts0FkARq9nYcHCSHeXMi+UJTw7RG6tcjO0W2gq3UpjQwMB2IIzAjl/HFPuNSR4nx8p2HA/ntSTNn6CFcjpBVJOynVvMxQ5jFFp2/bMYpk6nU6+cZtWrbgF65Ur2",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="})])}const Cl=d(c,[["render",El],["__file","hw-cd.html.vue"]]),Nl=JSON.parse(`{"path":"/docs/program/algorithm/hw-cd.html","title":"华为机考题CD卷","lang":"zh-CN","frontmatter":{"title":"华为机考题CD卷","description":"(出现频率:红色(5 次) > 蓝色(4 次) > 绿色(3 次) > 黄色(2 次) ) 停车场车辆统计 题目描述 特定大小的停车场，数组cars[]表示，其中1表示有车，0表示没车。 车辆大小不一，小车占一个车位（长度1），货车占两个车位（长度2），卡车占三个车位（长度3）。 统计停车场最少可以停多少辆车，返回具体的数目。 输入描述 整型字符串数组...","head":[["meta",{"property":"og:url","content":"https://bzt2017.github.io/newBlog/docs/program/algorithm/hw-cd.html"}],["meta",{"property":"og:site_name","content":"Tiger"}],["meta",{"property":"og:title","content":"华为机考题CD卷"}],["meta",{"property":"og:description","content":"(出现频率:红色(5 次) > 蓝色(4 次) > 绿色(3 次) > 黄色(2 次) ) 停车场车辆统计 题目描述 特定大小的停车场，数组cars[]表示，其中1表示有车，0表示没车。 车辆大小不一，小车占一个车位（长度1），货车占两个车位（长度2），卡车占三个车位（长度3）。 统计停车场最少可以停多少辆车，返回具体的数目。 输入描述 整型字符串数组..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.staticaly.com/gh/BZT2017/oss-img@main/eb378b5515874c268c7f1fe75ad03674.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-05T11:12:30.000Z"}],["meta",{"property":"article:author","content":"Tiger"}],["meta",{"property":"article:modified_time","content":"2024-06-05T11:12:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"华为机考题CD卷\\",\\"image\\":[\\"https://cdn.staticaly.com/gh/BZT2017/oss-img@main/eb378b5515874c268c7f1fe75ad03674.png\\",\\"https://cdn.staticaly.com/gh/BZT2017/oss-img@main/75a9cd9bc529429498db58f1cc4ef433.png\\"],\\"dateModified\\":\\"2024-06-05T11:12:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tiger\\",\\"url\\":\\"https://bzt2017.github.io/myBlog/\\"}]}"]]},"headers":[{"level":2,"title":"停车场车辆统计","slug":"停车场车辆统计","link":"#停车场车辆统计","children":[{"level":3,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":3,"title":"输入描述","slug":"输入描述","link":"#输入描述","children":[]},{"level":3,"title":"输出描述","slug":"输出描述","link":"#输出描述","children":[]},{"level":3,"title":"用例","slug":"用例","link":"#用例","children":[]},{"level":3,"title":"题目解析","slug":"题目解析","link":"#题目解析","children":[]}]},{"level":2,"title":"英文输入法","slug":"英文输入法","link":"#英文输入法","children":[{"level":3,"title":"题目描述","slug":"题目描述-1","link":"#题目描述-1","children":[]},{"level":3,"title":"输入描述","slug":"输入描述-1","link":"#输入描述-1","children":[]},{"level":3,"title":"输出描述","slug":"输出描述-1","link":"#输出描述-1","children":[]},{"level":3,"title":"用例","slug":"用例-1","link":"#用例-1","children":[]},{"level":3,"title":"题目解析","slug":"题目解析-1","link":"#题目解析-1","children":[]}]},{"level":2,"title":"API集群负载统计","slug":"api集群负载统计","link":"#api集群负载统计","children":[{"level":3,"title":"题目描述","slug":"题目描述-2","link":"#题目描述-2","children":[]},{"level":3,"title":"输入描述","slug":"输入描述-2","link":"#输入描述-2","children":[]},{"level":3,"title":"输出描述","slug":"输出描述-2","link":"#输出描述-2","children":[]},{"level":3,"title":"用例","slug":"用例-2","link":"#用例-2","children":[]}]},{"level":2,"title":"提取字符串中的最长合法简单数学表达式","slug":"提取字符串中的最长合法简单数学表达式","link":"#提取字符串中的最长合法简单数学表达式","children":[{"level":3,"title":"题目描述","slug":"题目描述-3","link":"#题目描述-3","children":[]},{"level":3,"title":"输入描述","slug":"输入描述-3","link":"#输入描述-3","children":[]},{"level":3,"title":"输出描述","slug":"输出描述-3","link":"#输出描述-3","children":[]},{"level":3,"title":"用例","slug":"用例-3","link":"#用例-3","children":[]},{"level":3,"title":"题目解析","slug":"题目解析-2","link":"#题目解析-2","children":[]}]},{"level":2,"title":"开源项目热度榜单","slug":"开源项目热度榜单","link":"#开源项目热度榜单","children":[{"level":3,"title":"题目描述","slug":"题目描述-4","link":"#题目描述-4","children":[]},{"level":3,"title":"输入描述","slug":"输入描述-4","link":"#输入描述-4","children":[]},{"level":3,"title":"输出描述","slug":"输出描述-4","link":"#输出描述-4","children":[]},{"level":3,"title":"用例","slug":"用例-4","link":"#用例-4","children":[]},{"level":3,"title":"题目解析","slug":"题目解析-3","link":"#题目解析-3","children":[]}]},{"level":2,"title":"虚拟理财游戏","slug":"虚拟理财游戏","link":"#虚拟理财游戏","children":[{"level":3,"title":"题目描述","slug":"题目描述-5","link":"#题目描述-5","children":[]},{"level":3,"title":"输入描述","slug":"输入描述-5","link":"#输入描述-5","children":[]},{"level":3,"title":"输出描述","slug":"输出描述-5","link":"#输出描述-5","children":[]},{"level":3,"title":"用例","slug":"用例-5","link":"#用例-5","children":[]},{"level":3,"title":"题目解析","slug":"题目解析-4","link":"#题目解析-4","children":[]}]},{"level":2,"title":"最长子字符串的长度（一）","slug":"最长子字符串的长度-一","link":"#最长子字符串的长度-一","children":[{"level":3,"title":"题目描述","slug":"题目描述-6","link":"#题目描述-6","children":[]},{"level":3,"title":"输入描述","slug":"输入描述-6","link":"#输入描述-6","children":[]},{"level":3,"title":"输出描述","slug":"输出描述-6","link":"#输出描述-6","children":[]},{"level":3,"title":"备注","slug":"备注","link":"#备注","children":[]},{"level":3,"title":"用例","slug":"用例-6","link":"#用例-6","children":[]},{"level":3,"title":"题目解析","slug":"题目解析-5","link":"#题目解析-5","children":[]}]},{"level":2,"title":"最长的指定瑕疵度的元音子串","slug":"最长的指定瑕疵度的元音子串","link":"#最长的指定瑕疵度的元音子串","children":[{"level":3,"title":"题目描述","slug":"题目描述-7","link":"#题目描述-7","children":[]},{"level":3,"title":"输入描述","slug":"输入描述-7","link":"#输入描述-7","children":[]},{"level":3,"title":"输出描述","slug":"输出描述-7","link":"#输出描述-7","children":[]},{"level":3,"title":"用例","slug":"用例-7","link":"#用例-7","children":[]},{"level":3,"title":"题目解析","slug":"题目解析-6","link":"#题目解析-6","children":[]}]},{"level":2,"title":"最富裕的小家庭","slug":"最富裕的小家庭","link":"#最富裕的小家庭","children":[{"level":3,"title":"题目描述","slug":"题目描述-8","link":"#题目描述-8","children":[]},{"level":3,"title":"输入描述","slug":"输入描述-8","link":"#输入描述-8","children":[]},{"level":3,"title":"输出描述","slug":"输出描述-8","link":"#输出描述-8","children":[]},{"level":3,"title":"用例","slug":"用例-8","link":"#用例-8","children":[]},{"level":3,"title":"题目解析","slug":"题目解析-7","link":"#题目解析-7","children":[]}]},{"level":2,"title":"最多购买宝石数目","slug":"最多购买宝石数目","link":"#最多购买宝石数目","children":[{"level":3,"title":"题目描述","slug":"题目描述-9","link":"#题目描述-9","children":[]},{"level":3,"title":"输入描述","slug":"输入描述-9","link":"#输入描述-9","children":[]},{"level":3,"title":"输出描述","slug":"输出描述-9","link":"#输出描述-9","children":[]},{"level":3,"title":"用例","slug":"用例-9","link":"#用例-9","children":[]},{"level":3,"title":"题目解析","slug":"题目解析-8","link":"#题目解析-8","children":[]}]}],"git":{"createdTime":1717585950000,"updatedTime":1717585950000,"contributors":[{"name":"tiger-github","email":"634513456@qq.com","commits":1}]},"readingTime":{"minutes":27.78,"words":8333},"filePathRelative":"docs/program/algorithm/hw-cd.md","localizedDate":"2024年6月5日","excerpt":"<p>(出现频率:<span style=\\"background:red;\\">红色(5 次)</span> &gt; <span style=\\"background:cyan;\\">蓝色(4 次)</span> &gt; <span style=\\"background:lime;\\">绿色(3 次)</span> &gt; <span style=\\"background:yellow;\\">黄色(2 次)</span> )</p>\\n<!-- ## <font color='red'>停车场车辆统计</font> -->\\n<h2><span style=\\"background:red;\\">停车场车辆统计</span></h2>","autoDesc":true}`);export{Cl as comp,Nl as data};
