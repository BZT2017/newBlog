import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,b as t}from"./app-D6F2mTvk.js";const e={},l=t(`<h2 id="es6-的新特性都有哪些" tabindex="-1"><a class="header-anchor" href="#es6-的新特性都有哪些"><span>ES6 的新特性都有哪些？</span></a></h2><ul><li><p>let 定义块级作用域变量, 没有变量的提升，必须先声明后使用, let 声明的变量，不能与前面的 let，var，conset 声明的变量重名</p></li><li><p>const 定义只读变量</p><ul><li>const 声明变量的同时必须赋值，const 声明的变量必须初始化，一旦初始化完毕就不允许修改</li><li>const 声明变量也是一个块级作用域变量</li><li>const 声明的变量没有“变量的提升”，必须先声明后使用</li><li>const 声明的变量不能与前面的 let， var ， const 声明的变量重</li><li>const 定义的对象\\数组中的属性值可以修改,基础数据类型不可以</li></ul></li><li><p>形参函数可设置默认值</p></li><li><p>展开运算符（...）</p></li><li><p>解构赋值(数组/对象)</p></li><li><p>箭头函数的特点</p><ul><li>箭头函数相当于匿名函数，是不能作为构造函数的，不能被 new</li><li>箭头函数没有 arguments 实参集合,取而代之用...剩余运算符解决</li><li>箭头函数没有自己的 this。他的 this 是继承当前上下文中的 this</li><li>箭头函数没有函数原型</li><li>箭头函数不能当做 Generator 函数，不能使用 yield 关键字</li></ul></li><li><p>不能使用 call、apply、bind 改变箭头函数中 this 指向</p></li><li><p>Set 数据结构，数组去重</p></li><li><p>模板字符串</p></li><li><p>Promise</p></li><li><p>Class</p></li><li><p>async/await</p></li></ul><h2 id="splice-和-slice、map-和-foreach、-filter-、reduce-的区别" tabindex="-1"><a class="header-anchor" href="#splice-和-slice、map-和-foreach、-filter-、reduce-的区别"><span>splice 和 slice、map 和 forEach、 filter()、reduce()的区别</span></a></h2><ul><li><p>slice(start, end): 方法可以从已有数组中返回选定的元素，返回一个新数组，包含从 start 到 end（不包含该元素）的数组方法</p><ul><li><mark>注意：该方法不会更新原数组，而是返回一个子数组</mark></li></ul></li><li><p>splice(index, howmany, item1, ...itemx): 该方法想或者从数组中添加或删除项目，返回被删除的项目。</p><ul><li>index 参数：必须，整数规定添加或删除的位置，使用负数，从数组尾部规定位置</li><li>howmany 参数：必须，要删除的数量，</li><li>item1..itemx:可选，向数组添- 加新项目</li><li><mark>注意：该方法会改变原数组</mark></li></ul></li><li><p>map(): 会返回一个全新的数组。使用于改变数据值的时候。会分配内存存储空间数组并返回，forEach（）不会返回数据</p></li><li><p>forEach(): 不会返回任何有价值的东西，并且不打算改变数据，单纯的只是想用数据做一些事情，他允许 callback 更改原始数组的元素</p></li><li><p>reduce(): 方法接收一个函数作为累加器，数组中的每一个值（从左到右）开始缩减，最终计算一个值，不会改变原数组的值</p></li><li><p>filter(): 方法创建一个新数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。它里面通过 function 去做处理</p></li></ul><h2 id="浏览器从加载到渲染完的整个过程" tabindex="-1"><a class="header-anchor" href="#浏览器从加载到渲染完的整个过程"><span>浏览器从加载到渲染完的整个过程</span></a></h2><ol><li><p>用户输入域名，然后 DNS 解析成 IP 地址</p></li><li><p>浏览器根据 IP 地址请求服务器</p></li><li><p>服务器响应 http 请求，并返回给浏览器</p></li><li><p>浏览开始渲染：</p></li></ol><ul><li><p>根据 html，生成 DOM 树</p></li><li><p>根据 css，生成 CSS 树</p></li><li><p>将 DOM TREE 和 CSS 树 结合生成 Render Tree（渲染树）</p></li><li><p>浏览器根据 Render Tree 渲染页面</p></li><li><p>遇到&lt; script &gt;则暂停渲染，优先执行 js，然后再继续渲染（因为 js 执行和渲染引擎公用一个进程，原因是 js 可能做了一些 dom 操作，一般会把 js 放到页面的底部） 遇到 js 操作 dom 的位置信息会导致<strong>重排</strong>，遇到改变内容颜色等会导致<strong>重绘</strong></p></li><li><p>直至把 Render Tree 渲染页面</p><p>注意：PS: display: none 的元素会出现在 DOM 树 中，但不会出现在 render 树中；</p></li></ul><h2 id="常用数组操作" tabindex="-1"><a class="header-anchor" href="#常用数组操作"><span>常用数组操作</span></a></h2><ul><li>原数组被修改 <ol><li><strong>push</strong> 往数组末尾添加一个或者多个元素，返回新数组长度</li><li><strong>pop</strong> 删除数组末尾元素，返回该元素</li><li><strong>unshift</strong> 往数组头部添加一个或多个元素，返回新数组长度</li><li><strong>shift</strong> 删除头部元素，返回该元素</li><li><strong>reverse</strong> 翻转数组</li><li><strong>sort</strong> 数组排序，返回排序后的数组</li><li><strong>splice</strong> 通过索引删除或替换元素，返回被删元素组成的数组</li></ol></li><li>不改变原数组 <ol><li><strong>concat</strong> 合并两个数组，返回新数组</li><li><strong>slice</strong> 截取数组元素，返回被截取的元素组成的数组</li><li><strong>join</strong> 将数组按参数拼接，返回一个字符串</li><li><strong>indexOf</strong> 查找符合参数的元素，返回该元素的下标</li></ol></li></ul><h2 id="手写防抖节流" tabindex="-1"><a class="header-anchor" href="#手写防抖节流"><span>手写防抖节流</span></a></h2><ul><li>防抖</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">msg</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">秒后我被触发了！</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fun<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>节流</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fun<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> t1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//初始时间</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当前时间</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t2 <span class="token operator">-</span> t1 <span class="token operator">&gt;</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
      t1 <span class="token operator">=</span> t2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解决跨域的方法" tabindex="-1"><a class="header-anchor" href="#解决跨域的方法"><span>解决跨域的方法</span></a></h2><ol><li>jsonp</li><li>服务端设置响应头</li><li></li></ol>`,16),i=[l];function p(o,c){return a(),s("div",null,i)}const d=n(e,[["render",p],["__file","初级.html.vue"]]),k=JSON.parse('{"path":"/docs/interview/base/%E5%88%9D%E7%BA%A7.html","title":"初级","lang":"zh-CN","frontmatter":{"title":"初级","date":"2022-06-21T00:00:00.000Z","description":"ES6 的新特性都有哪些？ let 定义块级作用域变量, 没有变量的提升，必须先声明后使用, let 声明的变量，不能与前面的 let，var，conset 声明的变量重名 const 定义只读变量 const 声明变量的同时必须赋值，const 声明的变量必须初始化，一旦初始化完毕就不允许修改 const 声明变量也是一个块级作用域变量 const ...","head":[["meta",{"property":"og:url","content":"https://bzt2017.github.io/newBlog/docs/interview/base/%E5%88%9D%E7%BA%A7.html"}],["meta",{"property":"og:site_name","content":"Tiger"}],["meta",{"property":"og:title","content":"初级"}],["meta",{"property":"og:description","content":"ES6 的新特性都有哪些？ let 定义块级作用域变量, 没有变量的提升，必须先声明后使用, let 声明的变量，不能与前面的 let，var，conset 声明的变量重名 const 定义只读变量 const 声明变量的同时必须赋值，const 声明的变量必须初始化，一旦初始化完毕就不允许修改 const 声明变量也是一个块级作用域变量 const ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-25T10:55:16.000Z"}],["meta",{"property":"article:author","content":"Tiger"}],["meta",{"property":"article:published_time","content":"2022-06-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-25T10:55:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"初级\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-25T10:55:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tiger\\",\\"url\\":\\"https://bzt2017.github.io/myBlog/\\"}]}"]]},"headers":[{"level":2,"title":"ES6 的新特性都有哪些？","slug":"es6-的新特性都有哪些","link":"#es6-的新特性都有哪些","children":[]},{"level":2,"title":"splice 和 slice、map 和 forEach、 filter()、reduce()的区别","slug":"splice-和-slice、map-和-foreach、-filter-、reduce-的区别","link":"#splice-和-slice、map-和-foreach、-filter-、reduce-的区别","children":[]},{"level":2,"title":"浏览器从加载到渲染完的整个过程","slug":"浏览器从加载到渲染完的整个过程","link":"#浏览器从加载到渲染完的整个过程","children":[]},{"level":2,"title":"常用数组操作","slug":"常用数组操作","link":"#常用数组操作","children":[]},{"level":2,"title":"手写防抖节流","slug":"手写防抖节流","link":"#手写防抖节流","children":[]},{"level":2,"title":"解决跨域的方法","slug":"解决跨域的方法","link":"#解决跨域的方法","children":[]}],"git":{"createdTime":1715939602000,"updatedTime":1719312916000,"contributors":[{"name":"tiger-github","email":"634513456@qq.com","commits":2}]},"readingTime":{"minutes":4.14,"words":1241},"filePathRelative":"docs/interview/base/初级.md","localizedDate":"2022年6月21日","excerpt":"<h2>ES6 的新特性都有哪些？</h2>\\n<ul>\\n<li>\\n<p>let 定义块级作用域变量, 没有变量的提升，必须先声明后使用, let 声明的变量，不能与前面的 let，var，conset 声明的变量重名</p>\\n</li>\\n<li>\\n<p>const 定义只读变量</p>\\n<ul>\\n<li>const 声明变量的同时必须赋值，const 声明的变量必须初始化，一旦初始化完毕就不允许修改</li>\\n<li>const 声明变量也是一个块级作用域变量</li>\\n<li>const 声明的变量没有“变量的提升”，必须先声明后使用</li>\\n<li>const 声明的变量不能与前面的 let， var ， const 声明的变量重</li>\\n<li>const 定义的对象\\\\数组中的属性值可以修改,基础数据类型不可以</li>\\n</ul>\\n</li>\\n<li>\\n<p>形参函数可设置默认值</p>\\n</li>\\n<li>\\n<p>展开运算符（...）</p>\\n</li>\\n<li>\\n<p>解构赋值(数组/对象)</p>\\n</li>\\n<li>\\n<p>箭头函数的特点</p>\\n<ul>\\n<li>箭头函数相当于匿名函数，是不能作为构造函数的，不能被 new</li>\\n<li>箭头函数没有 arguments 实参集合,取而代之用...剩余运算符解决</li>\\n<li>箭头函数没有自己的 this。他的 this 是继承当前上下文中的 this</li>\\n<li>箭头函数没有函数原型</li>\\n<li>箭头函数不能当做 Generator 函数，不能使用 yield 关键字</li>\\n</ul>\\n</li>\\n<li>\\n<p>不能使用 call、apply、bind 改变箭头函数中 this 指向</p>\\n</li>\\n<li>\\n<p>Set 数据结构，数组去重</p>\\n</li>\\n<li>\\n<p>模板字符串</p>\\n</li>\\n<li>\\n<p>Promise</p>\\n</li>\\n<li>\\n<p>Class</p>\\n</li>\\n<li>\\n<p>async/await</p>\\n</li>\\n</ul>","autoDesc":true}');export{d as comp,k as data};
